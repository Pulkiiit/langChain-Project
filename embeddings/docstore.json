[[["174f96b3-fff1-41fe-8e5e-e31e1d131d32",{"pageContent":" \n \nBy \nElton Stoneman \nForeword by Daniel Jebaraj \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":2}}}],["747f4b27-cde8-4cd0-baff-1c3210fac2e9",{"pageContent":" \n \n3 \nCopyright © 2018 by Syncfusion, Inc. \n2501 Aerial Center Parkway \nSuite 200 \nMorrisville, NC 27560 \nUSA \nAll rights reserved. \n \nmportant licensing information. Please read. \nThis book is available for free download from www.syncfusion.com on completion of a registration form. \nIf you obtained this book from any other source, please register and download a free copy from \nwww.syncfusion.com. \nThis book is licensed for reading only if obtained from www.syncfusion.com. \nThis book is licensed strictly for personal or educational use. \nRedistribution in any form is prohibited. \nThe authors and copyright holders provide absolutely no warranty for any information provided. \nThe authors and copyright holders shall not be liable for any claim, damages, or any other liability arising \nfrom, out of, or in connection with the information in this book. \nPlease do not use this book if the listed terms are unacceptable. \nUse shall constitute acceptance of the terms listed. \nSYNCFUSION, SUCCINCTLY, DELIVER INNOVATION WITH EASE, ESSENTIAL, and .NET ESSENTIALS are the \nregistered trademarks of Syncfusion, Inc. \n \n \n \nTechnical Reviewer: James McCaffrey \nCopy Editor: John Elderkin \nAcquisitions Coordinator: Morgan Weston, social media manager, Syncfusion, Inc. \nProofreader: Graham High, senior content producer, Syncfusion, Inc.   \nI ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":3}}}],["6ca95aaf-3e3d-40d1-98aa-e7f56a813b0b",{"pageContent":" \n \n4 \nTable of Contents \nThe Story behind the Succinctly Series of Books ................................................................................... 7 \nAbout the Author ......................................................................................................................................... 9 \nChapter 1  Introducing Docker................................................................................................................. 10 \nWhat is Docker? ..................................................................................................................................... 10 \nInstalling Docker .................................................................................................................................... 10 \nRunning containers ................................................................................................................................ 13 \nSummary ................................................................................................................................................ 19 \nChapter 2  Packaging Applications with Docker ................................................................................... 20 \nMeet the Dockerfile ................................................................................................................................ 20 \nThe main Dockerfile instructions ............................................................................................................ 22 \nHow Docker builds an image ................................................................................................................. 25 \nSummary ................................................................................................................................................ 29 \nChapter 3  Image Registries and the  Docker Hub ................................................................................ 30 \nAbout image registries ........................................................................................................................... 30 \nUsing the Docker Hub ............................................................................................................................ 30 \nTags and image versions ....................................................................................................................... 32 \nAutomating builds .................................................................................................................................. 34 \nChoose your base image carefully ........................................................................................................ 36 \nRunning your own registry ..................................................................................................................... 38 \nOther registry options ............................................................................................................................. 40 \nSummary ................................................................................................................................................ 40 \nChapter 4  Data Storage in Docker .......................................................................................................... 41 \nContainers and their data....................................................................................................................... 41 \nImages, containers, and volumes .......................................................................................................... 41 ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":4}}}],["4dfd0b1b-64ba-475c-a550-013914cafcab",{"pageContent":" \n \n5 \nMounting into data volumes ................................................................................................................... 43 \nSharing data volumes ............................................................................................................................ 45 \nRemoving containers, data volumes, and images ................................................................................. 48 \nSummary ................................................................................................................................................ 50 \nChapter 5  Orchestrating Systems with Docker..................................................................................... 51 \nOrchestrating multicontainer solutions ................................................................................................... 51 \nDocker networks .................................................................................................................................... 51 \nDocker Compose ................................................................................................................................... 55 \nSummary ................................................................................................................................................ 60 \nChapter 6  Clustering Hosts with Docker Swarm .................................................................................. 61 \nClustering with Docker swarm mode ..................................................................................................... 61 \nCreating a Docker swarm ...................................................................................................................... 61 \nWorking with Docker swarm .................................................................................................................. 63 \nScaling services ..................................................................................................................................... 66 \nSummary ................................................................................................................................................ 70 \nChapter 7  Docker on Linux, Windows,  and ARM ................................................................................. 71 \nContainers and kernels .......................................................................................................................... 71 \nDocker on Linux ..................................................................................................................................... 72 \nDocker on Windows ............................................................................................................................... 74 \nDocker on ARM ...................................................................................................................................... 75 \nHybrid Docker swarms ........................................................................................................................... 77 \nSummary ................................................................................................................................................ 79 \nChapter 8  Running Docker in the Cloud ................................................................................................ 80 \nDocker versus the cloud ........................................................................................................................ 80 \nDocker on DigitalOcean ......................................................................................................................... 80 \nDocker for Azure .................................................................................................................................... 84 \nMulticloud Docker swarms ..................................................................................................................... 87 ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":5}}}],["03c21ae8-a94f-4ed1-970b-313a3b89166f",{"pageContent":" \n \n6 \nSummary ................................................................................................................................................ 89 \nChapter 9  Continuing Your Docker Journey ......................................................................................... 91 \nNext steps with Docker .......................................................................................................................... 91 \nDocker and Docker, Inc. ........................................................................................................................ 91 \nDocker and DevOps ............................................................................................................................... 96 \nDocker and microservices...................................................................................................................... 97 \nNext steps: containerize what you know ................................................................................................ 98 \n \n ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":6}}}],["3fb5464a-2d7b-469d-adbe-75a968bac1dd",{"pageContent":" \n \n7 \nThe Story behind the Succinctly Series \n of Books \nDaniel Jebaraj, Vice President \nSyncfusion, Inc. \ntaying on the cutting edge \nAs many of you may know, Syncfusion is a provider of software components for the \nMicrosoft platform. This puts us in the exciting but challenging position of always \nbeing on the cutting edge. \nWhenever platforms or tools are shipping out of Microsoft, which seems to be about \nevery other week these days, we have to educate ourselves, quickly. \nInformation is plentiful but harder to digest \nIn reality, this translates into a lot of book orders, blog searches, and Twitter scans. \nWhile more information is becoming available on the Internet and more and more books are \nbeing published, even on topics that are relatively new, one aspect that continues to inhibit us is \nthe inability to find concise technology overview books.  \nWe are usually faced with two options: read several 500+ page books or scour the web for \nrelevant blog posts and other articles. Just as everyone else who has a job to do and customers \nto serve, we find this quite frustrating. \nThe Succinctly series \nThis frustration translated into a deep desire to produce a series of concise technical books that \nwould be targeted at developers working on the Microsoft platform.  \nWe firmly believe, given the background knowledge such developers have, that most topics can \nbe translated into books that are between 50 and 100 pages.  \nThis is exactly what we resolved to accomplish with the Succinctly series. Isn’t everything \nwonderful born out of a deep desire to change things for the better? \nThe best authors, the best content \nEach author was carefully chosen from a pool of talented experts who shared our vision. The \nbook you now hold in your hands, and the others available in this series, are a result of the \nauthors’ tireless work. You will find original content that is guaranteed to get you up and running \nin about the time it takes to drink a few cups of coffee.  \nFree forever  \nSyncfusion will be working to produce books on several topics. The books will always be free. \nAny updates we publish will also be free.  \nS ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":7}}}],["bfd6f245-88c7-4845-a26f-1f9ff49eabff",{"pageContent":" \n \n8 \nFree? What is the catch? \nThere is no catch here. Syncfusion has a vested interest in this effort.  \nAs a component vendor, our unique claim has always been that we offer deeper and broader \nframeworks than anyone else on the market. Developer education greatly helps us market and \nsell against competing vendors who promise to “enable AJAX support with one click,” or “turn \nthe moon to cheese!” \nLet us know what you think \nIf you have any topics of interest, thoughts, or feedback, please feel free to send them to us at \nsuccinctly-series@syncfusion.com.  \nWe sincerely hope you enjoy reading this book and that it helps you better understand the topic \nof study. Thank you for reading. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nPlease follow us on Twitter and “Like” us on Facebook to help us spread the  \nword about the Succinctly series! \n                      ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":8}}}],["e7aa12a4-d15d-41b8-9af9-8e43791a214f",{"pageContent":" \n \n9 \nAbout the Author \nElton Stoneman is a Pluralsight author and Microsoft MVP, and he was a Docker Captain before \nhe joined Docker. He has been connecting systems since 2000, and he has spent many years \ndesigning and building distributed solutions with a variety of technologies and a mixture of on-\npremises and cloud deliveries. \nHis popular Pluralsight courses cover a range of technologies, including Microsoft .NET, Nginx, \nAWS, Azure, Big Data, and Docker.  \nDocker Succinctly is Elton’s fourth e-book for Syncfusion (following Hadoop Succinctly, Hive \nSuccinctly, and HBase Succinctly), and it is accompanied by source code on GitHub along with \nlinks to various container images on the Docker Hub at \nhttps://github.com/SyncfusionSuccinctlyE-Books/Docker-Succinctly. \nHe’s also written a comprehensive book about Windows containers, Docker on Windows, \npublished by Packt. \nYou’ll find Elton in other places online, like blogging at https://blog.sixeyed.com, or tweeting \n@EltonStoneman. \n  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":9}}}],["1ff5b99f-45e4-4993-96fe-22a8ced183c8",{"pageContent":" \n \n10 \nChapter 1  Introducing Docker \nWhat is Docker? \nDocker is an application platform. It lets you package your application with everything it needs, \nfrom the operating system upwards, into a single unit that you can share and run on any \ncomputer that has Docker. Docker runs your application in a lightweight, isolated component \ncalled a container. \nIt’s a simple proposition, but it is hugely powerful. The application package, called a Docker \nimage, is typically only tens or hundreds of megabytes, so it’s cheap to store and fast to move. \nWhen you run a container from the image, it will start in seconds and the application process \nactually runs on the host, which means you can run hundreds of containers on a single \nmachine. Images can be versioned, so you can be sure the software you release to production \nis exactly what you’ve tested, and the Docker tools can even scan images for security \nvulnerabilities, so you will know if your application is safe. \nWith Docker, you can build your application image and know that it will run in the same way on \nyour development laptop, on a VM in an on-premise test lab, or on a cluster of machines in the \ncloud. It’s a facilitator for some of the most popular trends in software delivery. You can easily \nadd a packaging step into your continuous integration process to generate a versioned image \nfor every commit. You can extend that to continuous delivery, automatically deploying the latest \nimage through environments to production. In Docker, the packaging process is where \ndevelopment and operations meet, which means it’s a great start for the transition to DevOps. \nAnd having a framework for orchestrating work between many containers gives you the \nfoundation for microservice architectures. \nDocker is open source and cross-platform, and one of its ecosystem’s most compelling aspects \nis the Docker Hub—a public registry where organizations and individuals share their own \napplication container images. On the Hub, you’ll find official, supported images for popular \ntechnologies such as Nginx, MariaDB, and Redis alongside custom community images, and you \ncan share your own images, too. Images on the Hub can be as simple as a Hello World app or \nas complex as a fully distributed Hadoop cluster, and because the images are usually open \nsource, navigating the Hub is a great way to get started with Docker. \nIn this chapter, we’ll do just that—we’ll get Docker installed, and we’ll run some containers using \nimages from the Docker Hub. We’ll see how easy it is to get up and running with Docker, and \nwe’ll begin to understand the power of the platform. In the rest of this e-book, we’ll dig deeper \nand walk through all you’ll need to know in order to be comfortable using Docker in production. \nInstalling Docker \nDocker is a single product which has three components—the background server that does the \nwork; the Docker client, a command-line interface for working with the server; and a REST API \nfor client-server communication.  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":10}}}],["2445d508-9694-4d96-9e5f-6e8e9736e064",{"pageContent":" \n \n11 \nThe client is cross-platform, which means you can run it natively from Linux, Windows, and \nOS/X machines, and you can manage Docker running locally or on a remote machine. The \nDocker server runs on Linux and on the latest versions of Windows. \nYou don’t need to be a Linux guru to use Docker effectively. The Docker team has put together \npackages for Mac and Windows that make use of virtualization technology on the host so that \nyour Docker server runs inside a Linux VM on your OS/X or Windows machine (you run the \nclient locally and talk to the server through the REST API exposed on the VM).  \n Note: The latest Docker for Mac and Docker for Windows packages require up-to-\ndate versions of the operating systems OS/X Yosemite or Windows 10. If you’re running \nolder versions, you can still use Docker with the Docker Toolbox. It’s an older package \nthat uses VirtualBox to run the Linux VM, but you use it in the same way. \nFigure 1 shows the different options for running the Docker Engine on various operating \nsystems. \n \nFigure 1: Running Docker on Windows, Mac, and Linux \nThat figure may look complex, but it’s all wrapped up in simple installations. Knowing how \nDocker actually runs on your machine is a good idea, but the installation itself will only take a \nfew minutes to download, followed by just a couple of clicks. Docker’s documentation is first-\nrate, and the Get started section on Docker Store includes detailed instructions for Mac, \nWindows, and Linux. \n ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":11}}}],["f40410c7-024f-4b52-9dc5-3e8ea2aca5b6",{"pageContent":" \n \n12 \n \n Note: On Windows, you’ll need to have Hardware Virtualization (VT-x) enabled in the \nBIOS to run the Docker Linux VM, and after installing you’ll need to reboot. You can \nswitch between Windows containers and Linux containers—the examples in this book \nuse Linux containers. \nAfter you’ve installed Docker, simply launch a command-line window (or the Docker Terminal if \nyou’re using Docker Toolbox) and you can start running Docker client commands. Code Listing \n1 shows the output from running docker version, which gives you details on the installed \nversion of Docker. \nCode Listing 1: Checking the Version of Docker \n$ docker version \nClient: \n Version:      17.11.0-ce \n API version:  1.34 (downgraded from 1.35) \n Go version:   go1.9.2 \n Git commit: \n Built:        Fri Nov 24 16:01:38 2017 \n OS/Arch:      darwin/amd64 \n Orchestrator: kubernetes \n \nServer: \n Version:      17.11.0-ce \n API version:  1.34 (minimum version 1.12) \n Go version:   go1.8.5 \n Git commit:   1caf76c \n Built:        Mon Nov 20 18:39:28 2017 \n OS/Arch:      linux/amd64 \n Experimental: true ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":12}}}],["894f623a-e247-4111-89d9-2dc3149ba681",{"pageContent":" \n \n13 \nDocker reports separately on the client and the server because you might be using a local client \nto manage a remote server, and those could be on different versions or different platforms. \nDocker is built using Go, but it ships as compiled binaries, which means you don’t need to install \nthe Go runtime beforehand. \nWith Docker installed, you’re ready to start running some containers. \nRunning containers \nDocker images are packaged applications. You can push them to a central store (called a \nregistry) and pull them on any machine that has access to the registry. The image is a single \nlogical unit that contains the application package. In order to start the app, you run a container \nfrom the image.  \nImages are typically built to run a single process. If your app needs to work with other services, \nyou run those services in their own containers and orchestrate them so that all the containers \ncan work together (which you’ll learn about in Chapter 5, Orchestrating Systems with Docker.  \nWhen you run a container from an image, it may be a short-lived app that runs some \nfunctionality and then ends; it may be a long-running app that runs like a background service; or \nit may be an interactive container that you can connect with as though it was a remote machine. \nHello World \nLet’s start with the simplest container you can run. With Docker installed and an Internet \nconnection, you can run the command in Code Listing 2 and see the Hello World container in \naction. \nCode Listing 2: Running Hello World \n$ docker container run hello-world \nUnable to find image 'hello-world:latest' locally \nlatest: Pulling from library/hello-world \nb04784fba78d: Pull complete \nDigest: sha256:f3b3b28a45160805bb16542c9531888519430e9e6d6ffc09d72261b0d26ff74f \nStatus: Downloaded newer image for hello-world:latest \n \nHello from Docker! \n... ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":13}}}],["0b802f3d-09d2-4948-83ee-88df14d03f64",{"pageContent":" \n \n14 \nYou’ll see some helpful text written out, but don’t be underwhelmed that your first container \nmerely writes to the console. When you run the command, there’s a lot happening: \n• Your local Docker client sends a request to the Docker server to run a container from \nthe image called hello-world. \n• The Docker server checks to see if it has a copy of the image in its cache. If not, it will \ndownload the image from Docker Hub. \n• When the image is downloaded locally, the Docker server runs a container from the \nimage, and sends the output back to the Docker client.  \nWith this image, the process inside the container ends when the console output has been \nwritten, and Docker containers exit when there are no processes running inside. You can check \nthat by getting a list of running containers from Docker using the container ls (container list) \ncommand. Because the hello-world container has ended, there are no running containers \nand the command output will be empty, as in Code Listing 3. \nCode Listing 3: Checking for Running Containers \n$ docker container ls \nCONTAINER ID        IMAGE               COMMAND             CREATED             \nSTATUS              PORTS               NAMES \n Tip: You can see all your containers, including the ones that have exited, by running \ndocker container ls --all, which lists containers in any status. \nThis type of container, which executes some code and then exits, is a very useful pattern. You \ncan use this approach for containers that script repetitive tasks such as backing up data, \ncreating infrastructure in the cloud, or processing a message from a message queue. But \ncontainers are equally well-suited for long-running background processes. \nHello Nginx \nNginx is a powerful, lightweight, open-source HTTP server. It’s been growing in popularity for \nmany years—as a Web server, it has been progressively taking Internet market share from \nApache and IIS. With the growth of Docker, Nginx has seen an acceleration in popularity \nbecause it’s easy to configure, builds into a very small image, and has many features that gel \nnicely with orchestrated container workloads. \nThe Docker Hub has an official Nginx image that is maintained and supported by the Nginx \nteam. It comes in several variations, but they fundamentally do the same thing—start the Nginx \nserver process listening on port 80, inside a container. With Code Listing 4, you can run the \nsmallest version of the Nginx Docker image, which is based on Alpine Linux. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":14}}}],["907a157f-102a-43ee-9280-b2c9ef97d916",{"pageContent":" \n \n15 \nCode Listing 4: Running Nginx in a Container \n$ docker container run nginx:alpine \nUnable to find image 'nginx:alpine' locally \nalpine: Pulling from library/nginx \n019300c8a437: Pull complete \n2425a41f485c: Pull complete \n26e59859b15d: Pull complete \na69539b662c9: Pull complete \nDigest: sha256:6cf0606c8010ed70f6a6614f8c6dfedbdb5e2d207b5dd4b0fab846bbc26f263e \nStatus: Downloaded newer image for nginx:alpine \nWhen you run that image, a container will start in the foreground, running the Nginx process in \nyour terminal so that you can’t run any other commands. The container is listening for HTTP \nrequests on port 80, but that’s port 80 inside the container, so we can’t reach it from the host \nmachine. This container isn’t doing much, so we can kill it by ending the process with Ctrl+C. \nDocker supports long-running background processes, such as web servers, by allowing \ncontainers to run in detached mode, so the container keeps running in the background. Code \nListing 5 runs a new container from the same Nginx image, which will run in the background \nwith the --detach flag and with port 80 published with the --publish flag. \nCode Listing 5: Running Nginx as a Background Container \n$ docker container run --detach --publish 80:80 nginx:alpine \na840ccbfc8652cb6d52b5489146a59e8468747f3372e38426fe3deb40d84372a \nThat command publishes port 80 inside the container to port 80 on the host. Ports can’t be \nshared, so this will fail if you have another process listening on port 80. However, you can \npublish the container port to any free port on the host: --publish 8081:80 maps port 8081 on \nthe host to port 80 in the container. \nThe output from Docker shows the unique ID of the new container, then control returns to the \nterminal. You can check if the container is running with the container ls command, as in \nCode Listing 6. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":15}}}],["6b077ca7-949e-4011-9ecb-b2a619d4b91d",{"pageContent":" \n \n16 \nCode Listing 6: Listing the Background Container \n$ docker container ls \nCONTAINER ID        IMAGE               COMMAND                  CREATED             \nSTATUS              PORTS                         NAMES \na840ccbfc865        nginx:alpine        \"nginx -g 'daemon ...\"   47 seconds ago      \nUp 45 seconds       0.0.0.0:80->80/tcp          heuristic_roentgen \nThe output tells us a number of things: which image the container is running; a short form of the \ncontainer ID—starting a840 in this case—that Docker uniquely generates; the container name—\nheuristic_roentgen—that Docker will randomly assign unless we supply a name; and the \ncommand running in the container—nginx. This container is running in the background, Nginx \nis listening on port 80, and we’ve published port 80 from the container, mapping it to port 80 on \nthe host machine running the container. \nWhen requests come in to port 80 on the host now, they will be routed to the container, and the \nresponse will come from the Nginx process running inside the container. On Linux, the Docker \nEngine is running directly on your host machine, and Docker for Mac and Docker for Windows \nuse native network sharing, which means you can browse to http://localhost and see the \nNginx welcome page, as in Figure 2. \n \nFigure 2: Browsing the Web Server Inside the Container \n Tip: On older versions of Mac and Windows (using the Docker Toolbox), the Docker \nserver is running inside a Linux VM on VirtualBox, which will have its own IP address so \nthat you won’t use the localhost address. In order to access ports mapped from Docker \ncontainers, you can find the IP address of your Docker VM by running docker-machine \nip, which will give you an IP address like 192.168.99.100—and that’s where you browse. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":16}}}],["1e41d1cb-41e8-4347-99bf-d48be410e3ed",{"pageContent":" \n \n17 \nDocker is an ideal platform for long-running background services. The Nginx web server running \nin this container uses next to zero resources unless someone is accessing the site—but the \ncontainer doesn’t have a resource limit, which means that under peak load the Nginx container \ncan grab more resources, and the container process can max out 100% of CPU and memory as \nif it was running directly on the host. \nYou can run hundreds of background containers on a modestly specified server this way. \nProvided the usage patterns are varied and the container loads don’t all peak at the same time, \nthe host can happily share resources between all the containers. \nHello Ubuntu \nThe last type of container is one you run interactively. It stays alive as long as you’re connected \nto it with the Docker CLI, and it behaves like a remote connection to a separate machine. You \ncan use containers in this way to evaluate images, to use images as software tools, or to work \nthrough the steps when you’re building up your own image. \nThe majority of Docker Hub images use Linux as the base OS, and Ubuntu is one of the most \npopular base images. Canonical publishes the official Ubuntu image, and they have integrated \nDocker Hub with their release cycle so that the latest Ubuntu versions are available on the Hub. \nYou can run an interactive Ubuntu container using Code Listing 7’s command. \nCode Listing 7: Running an Interactive Ubuntu Container \n$ docker container run --interactive --tty ubuntu:16.04 \nroot@dafaf06d4ceb:/# \nWith the --interactive and --tty flags, Docker runs the container interactively with terminal \nemulation (it’s commonly abbreviated to -it). The container is still running on the Docker \nserver, but the client maintains an open connection to it until you exit the container. We’re using \nthe Ubuntu official image, but in the run command we’ve specified a particular version of the \nimage—16.04—that gives us the current Long Term Support version of Ubuntu. \nHowever, if you're used to working with Ubuntu, you’ll find that the version running in this \ncontainer won’t behave in the same way as the full Ubuntu Server edition. Code Listing 8 shows \nthat the normal Linux commands, such as ls and cat, work as expected in the container. \nCode Listing 8: Linux Commands in the Ubuntu Container \nroot@dafaf06d4ceb:/# ls -l /tmp \ntotal 0 \nroot@dafaf06d4ceb:/# cat /etc/hosts \n127.0.0.1       localhost \n::1     localhost ip6-localhost ip6-loopback ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":17}}}],["db0186ee-858d-41f8-8a78-bbad426b7dcd",{"pageContent":" \n \n18 \nfe00::0 ip6-localnet \nff00::0 ip6-mcastprefix \nff02::1 ip6-allnodes \nff02::2 ip6-allrouters \n172.17.0.5      dafaf06d4ceb \n Note: There are some interesting entries in the hosts file. Docker injects some \nruntime details about the container into that file in order to help with discoverability \nbetween containers. We’ll see more of that in Chapter 5, Orchestrating Systems with \nDocker. \nThe version of Ubuntu in the Docker image is a heavily stripped down version of Ubuntu Server, \nwhich means some of the most basic utilities aren’t available. In order to edit the hosts file, we \nmight expect to use the Nano text editor, but it’s not installed, and if we try to install it, we’ll see \nthe software libraries aren’t up to date in the image either, as shown in Code Listing 9. \nCode Listing 9: Missing Utilities in the Ubuntu Image \nroot@dafaf06d4ceb:/# nano /etc/hosts \nbash: nano: command not found \nroot@dafaf06d4ceb:/# apt-get install nano \nReading package lists... Done \nBuilding dependency tree \nReading state information... Done \nE: Unable to locate package nano \nYou can still use the container like any other Ubuntu installation so that you can update the \npackage repositories with apt-get update and install whichever tools you like. But you’re only \nchanging this instance of the container, not the underlying image. When you run the exit \ncommand, the container will be stopped but your changes won’t be saved. The next time you \nrun a container from the Ubuntu image, it will be the same minimal version of the OS. \nThe Docker Hub has many such images that are intended to be used as a base image for your \nown apps. Ubuntu, Alpine, and BusyBox are popular, and they’re deliberately minimal. Having \nless software installed means less bloat, which means the images are smaller, and it also \nmeans a reduced attack vector because there are fewer packages with potential vulnerabilities. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":18}}}],["a79b161b-102f-4ec0-b8b3-d8b8a6e95ef4",{"pageContent":" \n \n19 \nApplication containers are not meant to be treated like VMs or physical servers—you wouldn’t \nnormally connect to a running container to fix an issue or patch the OS. Containers are so \ncheap to build and run that you would update the image instead, using a newer version of the \nbase image if it had patches, then creating a new container and killing the old one. Not only will \nthat fix the problem with your application, but it will also give you an updated image with the \nproblem fixed for any future containers you run. \nSummary \nWe’ve seen what Docker does, learned how to use the Docker client, and looked at how the \nDocker Engine runs on different platforms. We’ve walked through the main usage patterns with \nDocker, running short-lived task containers that do a single job and then exit; we’ve looked at \nlong-running containers that keep background tasks running as long as the container is running; \nand we’ve examined interactive containers that exist as long as your client keeps an open \nconnection with them. \nThe foundations of Docker are very simple—applications are packaged into images, images are \nused to run containers on the Docker server, and the Docker client manages the containers. \nThere’s a lot more to learn about Docker, and in the rest of this e-book we’ll cover the features \nthat have made Docker a revolutionary technology in software delivery. \nIn the next chapter, we’ll look at packaging your own applications as Docker images.  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":19}}}],["bf378c53-0691-43aa-b090-01f7bad38e6f",{"pageContent":" \n \n20 \nChapter 2  Packaging Applications with \nDocker \nMeet the Dockerfile \nIn order to package up your own Docker image, you write a text document called a Dockerfile \nthat lists all the steps needed to both make the image and use the Docker command line to \nbuild it. The Dockerfile uses a very simple domain-specific language that only requires a handful \nof instructions. Code Listing 10 shows a perfectly valid Dockerfile. \nCode Listing 10: A Simple Dockerfile \nFROM ubuntu \nRUN apt-get update && apt-get install nano \nWhen you build an image from that Dockerfile and run a container from the image, you’ll be \nworking in an Ubuntu container with the nano package installed. The FROM instruction specifies \nthe base image so that your image will start from there and layer on the changes in the rest of \nyour Dockerfile. In this case, it will run two apt commands to install Nano. \nIn order to build an image, you use the docker image build command. You need to specify \nboth a repository name to identify the image, and the path Docker should use as the context for \nbuilding the image. You can also tag images with labels, which explains how you can have \nmultiple image versions in a repository (like ubuntu:12.04 and ubuntu:14.04). Code Listing \n11 builds an image using a file called Dockerfile in the local directory. \nCode Listing 11: Building the Docker Image \n$ docker image build --tag dockersuccinctly/ubuntu-with-nano . \nSending build context to Docker daemon 2.048 kB \nStep 1/2 : FROM ubuntu \nlatest: Pulling from library/ubuntu \nDigest: sha256:34471448724419596ca4e890496d375801de21b0e67b81a77fd6155ce001edad \nStatus: Downloaded newer image for ubuntu:latest \n ---> ccc7a11d65b1 \nStep 2/2 : RUN apt-get update && apt-get install nano \n ---> Running in 53cccf9021fb ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":20}}}],["4b233ba4-ef20-46a6-bc24-65df341204c3",{"pageContent":" \n \n21 \n... \n---> 9ef68677ce6a \nRemoving intermediate container 53cccf9021fb \nSuccessfully built 9ef68677ce6a \nSuccessfully tagged dockersuccinctly/ubuntu-with-nano:latest \n Tip: Dockerfile (with no extension) is the default filename Docker looks for, but you \ncan call your Dockerfile anything and identify it with the --file option. This means you \ncan call your file server.dockerfile and build it with docker image build --file \nserver.dockerfile. \nThe image build command gets executed by the Docker server—the client simply sends the \ndetails through. That’s why you must specify a path (using . for the current working directory in \nthis case). The client sends the contents of the path to the server, and the server stores it in a \nworking folder it uses to build the image. That folder is called the build context, and later in this \nchapter we’ll see why it’s important. \nYou can also give your image a repository name. When you build locally you can call your \nimage anything you like, but the convention is to use a format such as {user}/{application}, \nwhere the user part is your account ID on Docker Hub. \nThe tag is the unique identifier for a particular image within a repository, which means that in the \npublic registry on the Docker Hub you’ll see images with repository names like microsoft/azure-\ncli and sixeyed/hadoop-dotnet that each have many image versions. If you don’t specify a \nversion in a tag, Docker uses the default latest.  \n Note: Some images on the Hub don’t have a user in the repository name, which \nmeans the Ubuntu image is simply called ubuntu rather than canonical/ubuntu. These \nare from official repositories that are curated, verified, and security scanned. You should \nuse official images for your base image as a preference. \nWhen you successfully build an image, it’s stored in the Docker server’s local cache and you \ncan run containers from it. You can also push it to a shared image registry such as Docker Hub \nor your own registry (which we’ll cover in Chapter 3, Image Registries and the Docker Hub).  \nThe Docker CLI can list all the images stored in the Docker image cache with the image ls \ncommand, as shown in Code Listing 12. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":21}}}],["6eebdc07-3b8b-4200-bddb-22a0e1909829",{"pageContent":" \n \n22 \nCode Listing 12: Listing Images in the Engine Cache \n$ docker image ls \nREPOSITORY                         TAG                 IMAGE ID            CREATED             \nSIZE \ndockersuccinctly/ubuntu-with-nano  latest              b06d1e92b27e        3 minutes \nago       165.9 MB \nubuntu                             latest              f8d79ba03c00        8 days \nago          126.4 MB \nhello-world                        latest              c54a2cc56cbb        7 weeks \nago         1.848 kB \nnginx                              alpine              5ad9802b809e        8 weeks \nago         69.3 MB \nThe output from the docker image ls command tells you the repository name and the tag for \neach image, its unique image ID, when it was created in the cache, and the size. In this output, I \nhave three images downloaded from the Hub for the containers I ran in Chapter 1, and I have \nmy own newly built image with the dockersuccinctly account name. When you start using \nlarger images, your local cache can use a lot of disk space—we’ll see how to manage that in \nChapter 4, Data Storage in Docker. \nThe main Dockerfile instructions \nThe only required Dockerfile instruction is FROM, which specifies the base image on top of which \na new image will be built. Of course, that doesn’t do much on its own, but to build useful \nproduction-grade images you need only a few more instructions: \n• RUN: Execute a command.  \n• ENV: Set environment variables.  \n• COPY: Copy files from the build context into the image. \n• EXPOSE: Expose ports from the container that can be mapped to ports on the host. \n• VOLUME: Create a directory inside the image that can be mapped to external storage.  \n• CMD: Specify the command to run when the container starts. \nHere’s a very simple Dockerfile that shows all the main instructions—this image is for a basic \napp that listens for input on a specific port and echoes out any input it receives to a file. Code \nListing 13 shows the Dockerfile in full. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":22}}}],["c3b16ade-a1f6-4919-8606-d8af371363d0",{"pageContent":" \n \n23 \nCode Listing 13: Dockerfile for an Echo Application \nFROM ubuntu \nRUN apt-get update && \\ \n    apt-get install -y netcat-openbsd \nENV LOG_FILE echo.out \nCOPY ./echoserver.sh /echoserver.sh \nRUN chmod +x /echoserver.sh \nEXPOSE 8082 \nVOLUME /server-logs \nCMD /echoserver.sh \n Note: The full code is on GitHub at SyncfusionSuccinctlyE-Books/Docker-Succinctly, \nand a built image is available on the Docker Hub in the repository \ndockersuccinctly/echoserver. The order of instructions is important, as we’ll see soon, \nbut in this example the instructions are ordered to make them easy to follow. \nAs Docker builds that image, it will process each of the following instructions: \n• Download the latest ubuntu image if it’s not already in the local cache. \n• Update the package list and install the netcat package. \n• Set an environment variable called LOG_FILE with the value echo.out. \n• Copy the script called echoserver.sh from the build context into the root folder in the \ncontainer. \n• Make the script executable on the container. \n• Expose port 8082 from the container. \n• Create a filesystem mount called server-logs. \n Note: It’s important to understand that those commands are happening inside \ncontainers during the build process, not on your local machine. After you’ve built this \nimage on your machine, the image will have netcat installed and have a value set for the \nLOG_FILE environment variable, but your local machine won’t. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":23}}}],["5b118a53-4cd2-426f-ad01-46852582b023",{"pageContent":" \n \n24 \nEverything except the final CMD instruction gets executed during the build. When you run a \ncontainer from the image, Docker uses the CMD instruction to tell it how to start—in this case by \nrunning the echoserver.sh script. That script starts netcat listening on port 8082 and redirects \nthe output from client connections to a file. The file path uses the volume named in the \nDockerfile and the log file name from the environment variable. Code Listing 14 shows how to \nstart the echo server container and find the virtual IP address of the container. \nCode Listing 14: Running the Echo Server Container \n$ docker container run --detach --publish 8082:8082 --name echo-server \ndockersuccinctly/echoserver \n7a372ff9f350995b4bb8a84215cd8020bd87dbd196367935dab568ed1939cc5f \nThe container is now running netcat listening on port 8082, and Docker is forwarding requests to \nport 8082 on the local host into the container. \nIn Code Listing 15, we connect to the container using netcat on the host, specifying the \nlocalhost address and the published port 8082. Then we write a string to netcat and exit the \nconnection. \nCode Listing 15: Connecting to the Echo Server from the Host \n$ nc localhost 8082 \nHello, Docker Succinctly! \n^C \n Note: If you’re running on Windows, the netcat utility won’t be available, but you can \ninstall a version from https://eternallybored.org/misc/netcat/. \nAnd lastly, in Code Listing 16, we use docker container exec to run a command inside the \ncontainer and write the output back to the host. In this case, we read the contents of the output \nfile that netcat on the container is using—this is an echo of the string we sent from the client.  \nCode Listing 16: Viewing the Echo Server’s Log File \n$ docker container exec echo-server cat /server-logs/echo.out \nHello, Docker Succinctly! \nBy using a volume for the output location and an environment variable for the file name, we can \nchange where the echo data is written for different instances of the container when we run \nthem. We’ll look more closely at Docker volumes in Chapter 4, Data Storage in Docker. \nThis is a simple example of a standard approach to Dockerfiles. A typical Dockerfile for \npackaging an application will state a minimal base image, install the application platform, copy \nin the application source, compile the application, and specify how the application starts.  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":24}}}],["78239baa-40fe-42d1-9744-f9317419b61c",{"pageContent":" \n \n25 \nYou can vary that approach. For example, if your platform has an official image, you can use \nthat as the base, and if you can publish your app with all its dependencies, you can compile \nfirst, then copy the binaries into the container. There’s a balance between the portability of the \nDockerfile, dependencies on third-party resources, and the size of the built image. \nHow Docker builds an image \nDocker uses a layered filesystem for images. Starting from the base image, the Docker server \nruns a temporary container from the image for each instruction in the Dockerfile, executes the \ninstruction, then saves the temporary container as a new image, adding it to the local image \ncache. Docker uses the cache during the build process, which means that if it finds an image \nmatching the current instruction stack—that is, one that matches the state you’re asking Docker \nto create—it will reuse the cached image. \nYou can write your Dockerfile to make maximum use of the cache by ensuring that the \nDockerfile is correctly structured and that the Dockerfiles for different applications each have \nsimilar structures. This way, they will use cached images as much as possible. Ideally, when \nyou build apps with similar dependencies, Docker will need only to execute instructions in new \nlayers that are specific to the application. For instance, the Dockerfiles in Code Listing 17 and \nCode Listing 18 are identical up to the final COPY instruction. \nCode Listing 17: Dockerfile ‘A’ \nFROM ubuntu \nRUN touch /setup.txt \nRUN echo init > /setup.txt \nCOPY file.txt /a.txt \nCode Listing 18: Dockerfile ‘B’ \nFROM ubuntu \nRUN touch /setup.txt \nRUN echo init > /setup.txt \nCOPY file.txt /b.txt \nWhen you build an image from the first Dockerfile, it will create new layers for both of the RUN \ninstructions and the final COPY instruction. Code Listing 19 builds an image from the first \nDockerfile by using the -f flag to specify the source Dockerfile name. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":25}}}],["0cd2c14a-115b-4e94-bd9f-a55126ddefcf",{"pageContent":" \n \n26 \nCode Listing 19: Building Dockerfile ‘A’ \n$ docker image build -t dockersuccinctly/a -f a.dockerfile . \nSending build context to Docker daemon 4.096 kB \nStep 1 : FROM ubuntu \n ---> f8d79ba03c00 \nStep 2 : RUN touch /setup.txt \n ---> Running in c9761757ff3c \n ---> e4d6c1754277 \nRemoving intermediate container c9761757ff3c \nStep 3 : RUN echo init > /setup.txt \n ---> Running in 0f63b9763bef \n ---> 3050c9fc2760 \nRemoving intermediate container 0f63b9763bef \nStep 4 : COPY file.txt /a.txt \n ---> f339e6dd38bb \nRemoving intermediate container c1c6ba5469a5 \nSuccessfully built f339e6dd38bb \nLet’s note a few things here. The first instruction in Step 1 finds a match in the cache because \nwe’ve already downloaded the ubuntu image, which means Docker simply writes the ID of the \ncached image it’s going to use (starting f8d).  \nFor Step 2 there is no match, so Docker runs a temporary container from the f8d image, \nexecutes the command, and saves the temporary container to a new image with the ID starting \ne4d. Similarly, for Steps 3 and 4, there is no match in the cache, which means Docker runs a \ntemporary, intermediate container from the image in the previous step, saves the container as a \nnew image, and removes the intermediate container. \nThe docker image history command displays all the layers in an image, as in Code Listing \n20, which shows the layer history for the dockersuccinctly/a image. \nCode Listing 20: History of the ‘A’ Image \n$ docker image history dockersuccinctly/a \nIMAGE               CREATED             CREATED BY                                      ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":26}}}],["379e9ace-08b6-4c79-8469-fea5d23b1d77",{"pageContent":" \n \n27 \nSIZE                 \ne03337199b8c        3 seconds ago       /bin/sh -c #(nop) COPY \nfile:9363c0e5fcfd8d7ad   8 B                  \n715ac6bf594b        4 seconds ago       /bin/sh -c echo init > /setup.txt               \n5 B                  \n1e5d518d70c9        5 seconds ago       /bin/sh -c touch /setup.txt                     \n0 B                  \nf8d79ba03c00        8 days ago          /bin/sh -c #(nop) CMD [\"/bin/bash\"]             \n0 B                  \n<missing>           8 days ago          /bin/sh -c sed -i \n's/^#\\s*\\(deb.*universe\\)$/   1.895 kB             \n<missing>           8 days ago          /bin/sh -c rm -rf /var/lib/apt/lists/*          \n0 B                  \n<missing>           8 days ago          /bin/sh -c set -xe   && echo '#!/bin/sh' > \n/u   745 B                \n<missing>           8 days ago          /bin/sh -c #(nop) ADD \nfile:a2427e00553ce3905b   126.4 M \nThere is a lot of detail in there. The “missing” layers mean we don’t have the intermediate layers \nin our cache, because they’re part of the base Ubuntu image. Docker downloaded that image \nfrom the Hub—we didn't build it locally, which means we don’t have all the layers. But we can \nsee part of the instructions that went into building the final Ubuntu image, which is the one with \nID f8d that our image started with. There are three layers above that, one for each of the \ninstructions in the Dockerfile.  \nIf you now build an image from the second Dockerfile, it will find matching images in the cache \nfor the first two instructions. Docker tells you it’s found a cache hit in the build output, as we see \nin Code Listing 21. \nCode Listing 21: Building Dockerfile ‘B’ \n$ docker image build -t dockersuccinctly/b -f b.dockerfile . \nSending build context to Docker daemon 4.096 kB \nStep 1 : FROM ubuntu \n ---> f8d79ba03c00 \nStep 2 : RUN touch /setup.txt \n ---> Using cache \n ---> 1e5d518d70c9 ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":27}}}],["2a341e35-3230-45a7-a42d-e5104564099f",{"pageContent":" \n \n28 \nStep 3 : RUN echo init > /setup.txt \n ---> Using cache \n ---> 715ac6bf594b \nStep 4 : COPY file.txt /b.txt \n ---> 8cd641b1af84 \nRemoving intermediate container 6d924ab8d087 \nSuccessfully built 8cd641b1af84 \nThe Docker server has run only an intermediate container to execute the COPY instruction in \nStep 4 because there was no match in the cache for that. Everything up to that point can come \nfrom the cache because the Dockerfile instructions are identical to the cached layers. If we look \nat the layers in the dockersuccinctly/b image, we’ll see the bottom seven layers match the \ndockersuccinctly/a image and that only the final layer is different, as in Code Listing 22. \nCode Listing 22: History of the ‘B’ Image \n$ docker image history dockersuccinctly/b \nIMAGE               CREATED              CREATED BY                                      \nSIZE                 \n8cd641b1af84        About a minute ago   /bin/sh -c #(nop) COPY \nfile:9363c0e5fcfd8d7ad   8 B                  \n715ac6bf594b        5 minutes ago        /bin/sh -c echo init > /setup.txt               \n5 B                  \n1e5d518d70c9        5 minutes ago        /bin/sh -c touch /setup.txt                     \n0 B                  \nf8d79ba03c00        8 days ago           /bin/sh -c #(nop) CMD [\"/bin/bash\"]             \n0 B                  \n<missing>           8 days ago           /bin/sh -c sed -i \n's/^#\\s*\\(deb.*universe\\)$/   1.895 kB             \n<missing>           8 days ago           /bin/sh -c rm -rf /var/lib/apt/lists/*          \n0 B                  \n<missing>           8 days ago           /bin/sh -c set -xe   && echo '#!/bin/sh' > \n/u   745 B                \n<missing>           8 days ago           /bin/sh -c #(nop) ADD \nfile:a2427e00553ce3905b   126.4 MB ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":28}}}],["2aa28031-ed16-48d8-a847-09660cfb3cc1",{"pageContent":" \n \n29 \nThe image cache saves a huge amount of time when you’re building many images with similar \ninstructions. But you need to be careful with the image cache. Each instruction in a Dockerfile is \na candidate for adding to the image cache, which effectively preserves the state at the time the \nimage was built.  \nIf Docker finds a match in the cache, it will use that match, which means you need to be sure \nyou only cache layers that are good candidates for reuse and that don’t have contents that will \nbecome stale. For example, in Code Listing 23 we have the apt-get update command in its \nown RUN instruction. \nCode Listing 23: A Dockerfile Which Will Become Stale \nFROM ubuntu \nRUN apt-get update \nWhen this image gets built, it will cache a layer with an updated package list. If you build an \nimage from a different Dockerfile that starts with the same instructions, it will use the cached \nimage with the saved package list. If we build the new image several months after building the \noriginal image, the new image will pick up the old cached layer—it will not run apt-get update \nfor the new image. Any subsequent instructions that install packages will be using an old \npackage list. \n Tip: How you structure your Dockerfile impacts the speed of the build process, but the \nimage cache can also have a functional impact on the contents of the image. Docker’s \nresource Best practices for writing Dockerfiles is worth getting to know. One of its key \nrecommendations is that you combine multiple commands in a single RUN statement in \norder to prevent unintended cache hits. \nSummary \nPackaging applications into a Docker image is simple—you specify the base image, install \ndependencies, copy in your application files, and tell Docker the command to run when a \ncontainer starts from the image. You will need to consider the workflow for your Dockerfile so \nthat it builds efficiently, and you’ll also need to be aware of the Docker image cache and how it \ncan impact your builds. \nThe majority of the work that goes into the Dockerfile is about optimizing your image. Typically, \nfor a production image you want the smallest possible image in order to keep your app secure \nand make it easy to move around. The official base images on the Docker Hub are a good place \nto start, and in the next chapter we’ll have a closer look at the public Hub and other image \nregistries. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":29}}}],["b0ab89d7-6f6f-46bf-ba40-093ffa03d1b7",{"pageContent":" \n \n30 \nChapter 3  Image Registries and the  \nDocker Hub \nAbout image registries \nPackaging an application into a container image is easy with the docker image build \ncommand, but the image only gets created in the local image cache on your own machine. In \norder to make that image useful, you need to be able to ship it to different hosts, and that’s \nwhere image registries come in. A registry is simply a shared location for images—you can push \nimages you’ve created and pull images that you or other people have created. The registry is a \ncore concept in Docker, and you use the normal Docker command-line tool to work with \nregistries. \nThe Docker Hub is a free, public registry for images maintained by Docker, Inc. It is a hugely \npopular service—at the time of writing there are more than 900,000 images on the Hub, and \nthere have been more than 12 billion image pulls. Anyone can push images to the Hub, and in \naddition to the community images, there are also official images curated by Docker and \nsupported by their owners.  \nIt’s best to start with the Docker Hub, which is the default source and has a very useful feature \nset that makes it much more than just an image store. However, if you’re not comfortable storing \nyour own application images in a third-party cloud service, there are many other options. In this \nchapter, we’ll look at using the Hub, choosing images, and other registry options. \nUsing the Docker Hub \nThe Docker Hub is a public image registry provided by Docker Inc. (we’ll look at the relationship \nbetween Docker and Docker, Inc. in Chapter 9, Continuing Your Docker Journey). Docker Hub \nis the default registry for the Docker Engine, and you can pull images without needing an \naccount. So far, when we’ve run containers, the images have been downloaded from the \nDocker Hub without us having to configure anything. \nYou will need your own account on the Hub if you want to push images and share them. You \ncan register with the Hub at https://hub.docker.com and create a free account. The username \nyou choose will be the user part of the repository name when you build your own images (my \nusername on the Hub is sixeyed, and I can only push images which are prefixed sixeyed). The \nHub can be used for storing private repositories, too, and the free plan lets you store one private \nrepository and unlimited public ones. \n Tip: Don't be confused by the terminology here. A “registry” is a service for hosting \nlots of image repositories, potentially from different users. A “repository” is an image \nlibrary that potentially holds many different tagged images. For instance, the Docker Hub ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":30}}}],["674efcb1-87ba-4448-9e62-820b012ddd55",{"pageContent":" \n \n31 \n is a public registry, and one of its users is Microsoft. Microsoft has a repository for .NET \nCore, microsoft/dotnet, offering many image versions. You can pull a specific .NET Core \nimage from the microsoft/dotnet repository on the Docker Hub registry. \nWhen you have an account registered with the Docker Hub, you will need to add your \ncredentials to the Docker CLI using docker login, as shown in Code Listing 24. \nCode Listing 24: Logging in to Docker Hub \n$ docker login \nLogin with your Docker ID to push and pull images from Docker Hub. If you don't have \na Docker ID, head over to https://hub.docker.com to create one. \nUsername: sixeyed \nPassword:  \nLogin Succeeded  \nYou can now push images as well as pull them. My Docker Hub account also has access to the \ndockersuccinctly account, so I can push images there too. The image push command is very \nsimple, as we see in Code Listing 25. \nCode Listing 25: Pushing a Local Image to Docker Hub \n$ docker image push dockersuccinctly/echoserver \nThe push refers to a repository [docker.io/dockersuccinctly/echoserver] \nb9ff8817e1e9: Pushed  \nb859a9603b97: Pushed  \n4e31876babbb: Pushing [=====================>                             ] 16.87 \nMB/39.35 MB \n4699cbd1a947: Mounted from library/ubuntu  \n2bed5b3ec49f: Mounted from library/ubuntu  \n3834bde7e567: Mounted from library/ubuntu  \nd8d865b23727: Mounted from library/ubuntu \nThe push works intelligently, pushing only layers that aren’t already available in the registry. In \nthis case, the base image layers are from the official Ubuntu repository (technically called \nlibrary/ubuntu), which means they’re not pushed, and the command flags them as \n“mounted” instead. Only the new layers created by building my Dockerfile get pushed. If I modify \nthe Dockerfile and rebuild, and if only the top layer changes, when I push a new version only the \ntop layer will be uploaded. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":31}}}],["0844770c-b891-484d-9237-1bc2fa3f4e05",{"pageContent":" \n \n32 \nThat repository is now created in the Hub, and anyone can run containers from my image with a \ndocker container run command specifying the image tag. As we have seen, when we run a \ncontainer, Docker checks the image cache to see if it has a copy of the image locally. If not, it \nwill pull the image from the Docker Hub.  \nImage size can be a few megabytes or many gigabytes, so pulling large images might take a \nwhile, which means startup time for a new container can jump from seconds to minutes. In order \nto prevent that, you can explicitly pull images from the Hub and download them before they are \nneeded, so that when you do run a container it uses the local image, as in Code Listing 26. \nCode Listing 26: Pulling an Image \n$ docker image pull dockersuccinctly/echoserver \nUsing default tag: latest \nlatest: Pulling from dockersuccinctly/echoserver \nDigest: sha256:9f6b1e1fb9955d4a985f04b1f85166421faf4fe414e14921ccd3f431e35833e6 \nStatus: Downloaded newer image for dockersuccinctly/echoserver:latest \nTags and image versions \nSo far we’ve mostly referred to images by their repository name without specifying a particular \ntag. Docker image repositories use the basic format {user}/{app}, but often the tag is used to \nspecify a release version, or a variant of the image, in the format {user}/{app}:{tag}. If you \ndon’t specify a tag when you refer to an image, the default latest tag is used. You can see this \nwhen you list out your image cache with the docker image ls. Code Listing 27 shows the \nvarious Ubuntu images in my local cache, using the filter flag. \nCode Listing 27: Listing Images for a Repository \n$ docker image ls --filter reference=ubuntu \nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE \nubuntu              16.04               f8d79ba03c00        8 days ago          \n126.4 MB \nubuntu              latest              f8d79ba03c00        8 days ago          \n126.4 MB \nubuntu              xenial              f8d79ba03c00        8 days ago          \n126.4 MB \nubuntu              xenial-20160809     f8d79ba03c00        8 days ago          \n126.4 MB ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":32}}}],["6d1cfc84-5bed-4704-beb9-c2adeed920f7",{"pageContent":" \n \n33 \nubuntu              14.04               90d5884b1ee0        3 months ago        188 \nMB               \n Note: One image can have multiple tags. At the time of writing, if you pull ubuntu, \nubuntu:xenial, or ubuntu:16.04, you’ll get the same image, one with the ID that starts \nf8d. When Canonical releases a patch to Ubuntu, it uploads a new version with multiple \ntags—by codename and version. This is useful because you can base your images on \nubuntu and you’ll always use the latest patched version when you build. If you’re more \nspecific, your build will use the same image. If you have an old image based on \nubuntu:14.04 and rebuild it now, it will still be based on 14.04. \nTags can be version numbers, commit labels, codenames—any useful way to classify images. \nAn established, active image repository will have multiple images that make good use of the tag \nin order to tell you how the images are different. Table 1 shows some of the images available in \nthe official Elasticsearch repository, with image sizes and age at the time of writing. \nTable 1: Image Tags for Elasticsearch \nTag Name Compressed Size Last Updated \n5 157 MB 5 days ago \n5.0 157 MB 5 days ago \n5.0.0 157 MB 5 days ago \n5.0.0-alpha5 157 MB 5 days ago \nlatest 152 MB 5 days ago \n2 152 MB 5 days ago \n2.3 152 MB 5 days ago \n2.3.5 152 MB 5 days ago \n2.2 154 MB 5 days ago \nFrom that output we can clearly see that there is an old version 2.2, there’s a prerelease \nversion 5.0.0-alpha5, and there’s a latest tag for the current release. They’re all the same \nage, which suggests Elastic has an automated process that builds and pushes all versions at \nthe same time. On the main repository page on the Hub, we can also see that many of the tags \npoint to the same image, as in Figure 3. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":33}}}],["5a58bb09-4b9a-4837-b63a-1dea1f2655aa",{"pageContent":" \n \n34 \n \nFigure 3: Elasticsearch Images with Multiple Tags \nWe can use docker container run elasticsearch to start a container using the latest \nimage, which is currently version 2.3.5; if we want to try the alpha 5 release of version 5, we \nspecify the tag docker container run elasticsearch:5.0.0-alpha5; and if we want to \nstick with an old version, we can use docker container run elasticsearch:1.7. The same \nis true if we’re using that image as a base for our own containers. The FROM instruction in the \nDockerfile supports image tags, too. \n Tip: It’s a good idea to specify a tag for base images in your FROM instruction. If you \ndon’t, the image tagged as latest will be used. That tag can change to a different image \nwithout warning, and there can be breaking changes between image versions, which \nmeans your own images might fail to build. If you have an old image built on \nubuntu:14.04 but the Dockerfile specifies FROM ubuntu, the base image will be \nubuntu:16.04 the next time you build it, which is functionally different. \nAutomating builds \nManually building and pushing images is fine for apps that don’t change frequently, but if you’re \ndoing regular releases you will want to automate building and pushing your images. Docker Hub \nsupports automated builds for images when the Dockerfile and source is in GitHub or Bitbucket, \nwhich means you can set up the Hub to build and tag images whenever you commit changes. \nThe automated build setup is only available when you’re logged in to the Docker Hub. From the \ntop menu, select Create > Create Automated Build. From here, you can link your GitHub or \nBitbucket account and select the source git repository—you’ll see the screen in Figure 4.  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":34}}}],["bcb0c786-2251-4326-a3df-257c23ea3473",{"pageContent":" \n \n35 \n \nFigure 4: Creating an Automated Build in Docker Hub \nAfter the build is set up, any pushes to the git repo will trigger a build on Docker Hub. You can \nalso manually trigger a build, and Docker Hub will pull in the source files, run docker image \nbuild on its own servers, and upload the image to your Docker Hub repository. \nAutomated builds can be set up to create different image tags from different branches or tags \nfrom the source git repository. Figure 5 shows the automated build configuration for one of my \npublic images. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":35}}}],["1c9537cc-f010-4df2-bd21-4ccdb17d6bca",{"pageContent":" \n \n36 \n \nFigure 5: An Automated Build with Multiple Image Tags \nThere are two builds set up, one that uses the GitHub master branch as the source for the \nlatest image tag and one that uses the git tag 2.7.2 for an image with the same tag name. I \nuse that image for Hadoop training, specifying the tagged version 2.7.2 in the material. If I \nupdate the image with a new version of Hadoop, I’ll use a new tag. The old image won’t change \nand people using old content can still work along with it. But if I find a problem with the 2.7.2 \nimage, I can update it with the same tag so that it remains correct for the training. \nChoose your base image carefully \nDocker Hub is the default registry, and there are thousands of high-quality images available \nthere, but only the official repositories are curated. There are no quality gates on any other \nimages in the Hub, which means anyone can build anything into an image. You need to be \ncareful what you choose to run or to use as a base image.  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":36}}}],["621dadbd-e728-4935-badc-2d3406199987",{"pageContent":" \n \n37 \nThe official repositories are the best place to start. Not only are they actively supported, but the \nDocker Hub scans the images against a security vulnerability database and will flag any issues \nit finds in the image.  \nYou can see the results of the security scan if you’re logged in to the Docker Hub. Figure 6 \nshows the current status of the official Ubuntu image and some other interesting details. \n \nFigure 6: Security Scan Results for Ubuntu Images \nWe can see that the image for 16.04 is 16 MB smaller than version 14.04, and it currently has \ntwo known security vulnerabilities that you can drill into to find. The image for 14.04 currently \nhas 11 vulnerabilities. If you have images built from ubuntu:14.04, this information tells you it’s \nworth upgrading and rebuilding your images in order to get a smaller image and close off some \nattack vectors. The image for 16.10 is smaller still, which means Canonical is actively \nminimizing the image size with each new release. \nOnly a small number of official repositories exist, however. In the rest of the Hub, you may find \nseveral images that fit the requirements for a base image for your app, but you must be sure \nthey are trustworthy. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":37}}}],["ab7fcc9b-8f60-4e8e-a2d0-51ba58297aea",{"pageContent":" \n \n38 \nIf the image is set up as an automated build, you can check the Dockerfile in GitHub and be \nconfident that the image came from that Dockerfile because it was built and pushed by Docker’s \nservers. For images that aren’t automated, you can’t guarantee that.  \nMany images have a link to the Dockerfile, but if the image was manually built and pushed by a \nuser, the contents might not match what’s in the Dockerfile. Some images don’t have a \nDockerfile link at all. That doesn’t mean they’re poor quality or untrustworthy—the star rating \nand number of pulls might suggest they’re fine—but pulling the image first is a good precaution. \nAfter doing that, you can run docker image history and look through the instructions to get \nan idea what went into building the image. \n Note: If you find the perfect base image and it’s not from an official repository, the \npublisher is not required to keep that image up-to-date or even available. If you build \nfrom another user’s base image on the Hub, that repository can be deleted, leaving you \nunable to build your own image. If that’s a concern, you should consider cloning the \nsource and building your own version of the base image so that you can control the \nimage stack up to a reliable, official source. \nRunning your own registry \nNearly all of the images on the Docker Hub are packaged versions of free, open-source \nsoftware. For commercial or sensitive applications, you might not want your images built and \nhosted on a public service, even in a private repository. In that case, you can run your own \nregistry on your own hardware with Docker’s registry image. \nYes, it’s a Docker image available on the public Docker Hub that packages an application for \nrunning a private image registry you can use on-premise. Code Listing 28 shows how to run a \nsimple local registry. \nCode Listing 28: Running Your Own Image Registry \n$ docker container run -d -p 5000:5000 registry:2 \nDocker can use different registries from the default Docker Hub, and you need only to specify \nthe registry location as a prefix to the image repository name. The Docker Registry runs on port \n5000, which means that when you have a container running locally with port 5000 mapped, you \ncan reference it at localhost:5000. The registry address is actually part of the full image tag, \nso in order to push an existing image from your cache to your registry, you will need to tag it \nwith the address, as in Code Listing 29. \nCode Listing 29: Tagging an Image for a Different Registry \n$ docker image tag dockersuccinctly/echoserver \nlocalhost:5000/dockersuccinctly/echoserver \nYou can now push the image to your registry simply by specifying the full image name, as in \nCode Listing 30. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":38}}}],["35cbfead-9b77-4adc-9982-4cf1954f8ee1",{"pageContent":" \n \n39 \nCode Listing 30: Pushing to a Local Registry \n$ docker image push localhost:5000/dockersuccinctly/echoserver \nThe push refers to a repository [localhost:5000/sixeyed/docker-succinctly-\nechoserver] \nb9ff8817e1e9: Pushed  \nb859a9603b97: Pushed  \n4e31876babbb: Pushed  \n4699cbd1a947: Pushed  \n2bed5b3ec49f: Pushed  \n3834bde7e567: Pushed  \nd8d865b23727: Pushed  \nlatest: digest: \nsha256:9f6b1e1fb9955d4a985f04b1f85166421faf4fe414e14921ccd3f431e35833e6 size: 1776 \nThis gives you a lot of flexibility. You can pull the Ubuntu base image, tag it to give it a \ncompletely different name, and push it to your local registry. If you mandate that image as the \nbase for all your in-house container images, they will all use a version of Ubuntu that is in your \ncontrol. If, in the future, you decide to move to Debian, you can tag the official Debian image \nwith your custom name, replace the version in your registry, and rebuild your containers. They’ll \nall be rebased to use Debian. \nWith Docker’s Registry image, you get the basic push and pull functionality but not the \ncommand-line search option, and there is no UI, so it’s not feature-equivalent to the Docker \nHub. The REST API for the Registry gives you a lot of functionality, but without a friendly \ninterface. You can list all the repositories in your local registry with an HTTP GET to the \n_catalog endpoint, as in Code Listing 31. \nCode Listing 31: Querying the Local Registry with cURL \n$ curl localhost:5000/v2/_catalog \n{\"repositories\":[\"dockersuccinctly/echoserver\"]} \nThe Docker Registry is quite a technical option. You can set it up as production-grade, load-\nbalanced, secured cluster, but configuring it correctly and maintaining it well requires a good bit \nof effort. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":39}}}],["f0aeecad-b31a-4b96-931b-76ad563ff64a",{"pageContent":" \n \n40 \nOther registry options \nBecause the Registry API is public, compatible registries are available in other products. You \ncan use the integrated container registry in GitLab as part of a build pipeline so that when you \npush code, GitLab builds a container and pushes it to the registry. JFrog has a Docker registry \nadd-on for Artifactory. And Docker, Inc. has the Trusted Registry product, which we’ll look at in \nChapter 9, Continuing Your Docker Journey. \nSummary \nWe've now seen how to push and pull Docker images using different registries. The most \npopular registry is the Docker Hub, which has hundreds of thousands of images for all kinds of \napplications. The Hub has a free service level, and you can push your own images or make use \nof the automated build system in which the Hub will build images from a GitHub or Bitbucket \nrepository whenever you commit a change.  \nIf you’re packaging applications for internal use, you can host your own registry rather than \nusing the public Docker Hub. Doing so can be as simple as running the registry:2 image on a \ndesignated server in your network or running a scalable set of instances on multiple servers or \nusing a commercial registry product. \nFor cases in which you’re running your image registry inside a container, you’ll obviously want \nall your data permanently persisted. However, when it comes to saving data, Docker containers \nmay not behave as you expect. In the next chapter, we’ll get a better understanding of Docker \nvolumes.  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":40}}}],["7742aa3f-3fa2-4605-8bf0-30b7d31cf9a1",{"pageContent":" \n \n41 \nChapter 4  Data Storage in Docker \nContainers and their data \nDocker uses a layered filesystem for containers called the Union File System. When you run a \ncontainer from an image, all the layers going into the image are mounted in the container as \nread-only parts of the filesystem. Next, a read-write layer is created on top for this instance of \nthe container. You can change the data inside your container, but this will not change the image \nitself. If you create a file in a running container and run a second container from the same \nimage, the new container won’t have the file you created in the first container. \nThat restriction guarantees that every container you run from an image will start with exactly the \nsame state because the only way to change an image is to explicitly create a new one. In \nDocker, if you want to persist data in your container and have it available the next time you run \na container from that image, or if you want to share it with other containers or your host \nmachine, you do it with volumes. \nVolumes are like virtual disk drives inside the container. When you write to them, you’re actually \nwriting to a permanent location on the host machine’s disk (or another storage platform), but \ninside the container it will look just like a local file path. Volumes are owned by one container, \nbut they can be shared with other containers. In this chapter, we’ll see how Docker volumes \nwork and what you can do with them. \nImages, containers, and volumes \nWhen you run a container, volumes can be added to it or they can be configured in the \nDockerfile so that they’re part of the image—the same as explicitly specifying ports to be made \navailable with the EXPOSE instruction. The VOLUME instruction specifies a data volume with a \nnamed path that you can use as a file location in the container. Code Listing 32 shows a simple \nDockerfile with a single data volume with one file created in it. \nCode Listing 32: A Dockerfile with a Volume Instruction \nFROM ubuntu:16.04 \nRUN mkdir /v1 && touch /v1/file1.es.txt \nVOLUME /v1 \n Note: touch is a Linux command that creates a new, empty file or updates the \ntimestamp on an existing file. It’s a useful utility that Windows doesn’t have in the \ncommand shell or in PowerShell. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":41}}}],["72e7d143-48b0-4b63-aef2-a4e2a2a5ca5b",{"pageContent":" \n \n42 \nWe can build that image and run an interactive container from it in order to see what happens \nwhen we write data inside a container. Code Listing 33 runs a container from that image, which I \nbuilt with the tag dockersuccinctly/ubuntu-with-volume. The container runs interactively \n(with the -it options), and the Docker command also uses the --rm option, which will remove \nthe container once it exits. \nCode Listing 33: Running a Container with a Volume \n$ docker container run -it --rm dockersuccinctly/ubuntu-with-volume \nNow, we can write some data in our running container. This is an Ubuntu container, and we can \nwrite to the usual paths—/ is the filesystem root, and /v1 is the name of the volume we \nspecified in the Dockerfile. Code Listing 34 shows a new file being written to the volume. \nCode Listing 34: Creating a New File in a Volume \nroot@bf780f3e8a15:/# touch /v1/file2.es.txt \nAs long as that container is running, both the files in the volume exist and can be used inside \nthe container. Code Listing 35 shows the output of searching for all the .es.txt files on the \nfilesystem, and we can see two files are there. \nCode Listing 35: Finding Files in Volumes \nroot@bf780f3e8a15:/# find / -iname '*.es.txt' \n/v1/file2.es.txt \n/v1/file1.es.txt \nNow, if we exit the container, what will happen to the data? The container is removed because \nwe ran it with the --rm flag, but the files in the volume are in a location on the host, which raises \nthe question: can they still be used? In Code Listing 36, I run a second container from the same \nimage and repeat the find command. \nCode Listing 36: Checking the Volume in a New Container \n$ docker container run -it --rm dockersuccinctly/ubuntu-with-volume \nroot@9dd1e7d81018:/# find / -iname '*.es.txt' \n/v1/file1.es.txt \nBecause the new container isn’t sharing the volume from the first container, only the original file \nfrom the image exists. It has its own data volume on the host. The file from the image was \ncopied into the volume for the new container, but any changes this container makes won’t \nchange the image. The only way to add data into a volume that all containers will see is by \ncreating the files in the image using the Dockerfile. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":42}}}],["0010b331-e990-4c40-8d3e-570375eceae9",{"pageContent":" \n \n43 \n \n Note: The position of the VOLUME instruction in the Dockerfile is important. If you try \nto work with files in a volume after the VOLUME instruction, the work will be done in a \ntemporary container during the build process, and because the volume is container-\nspecific, the changes won’t be committed to the image. Instead, you should set up the \ndata on the filesystem first, so that it’s part of the image, then expose the volume. \nFigure 7 shows how data volumes compare with the filesystem layers in an image and how a \nrunning container makes use of both, together with its own, dedicated read-write layer. \n \nFigure 7: Layers in the Union File System \nThe setup is different when you map an image volume to a location on the host. \nMounting into data volumes \nIf you want to look at the data inside a container, you typically must attach to it or execute a \ncommand to run inside it. With data volumes, when you run a container, you can mount the \nvolume from a specified path on the host, which means you have a shared folder between the \nhost and any containers using the same mounted volume. \nYou can mount a volume using an option in the container run command similar to publishing \na port—you specify the path on the host and the name of the volume to map. Code Listing 37 \ncreates a folder in my home directory, then runs a container from the previous image but \nmounts the v1 container from the local directory on the host with the -v option. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":43}}}],["786ca99d-368e-40bb-8c28-c883ec232c49",{"pageContent":" \n \n44 \nCode Listing 37: Mounting a Volume from the Host \n$ mkdir ~/v1 \n \n$ docker container run -it --rm -v ~/v1:/v1 dockersuccinctly/ubuntu-with-volume \nThis action results in different behavior. When a data volume is mounted from the host, files \nfrom the image do not get copied into the container volume when it starts because this is a \nshared location and copying files could overwrite data. So, in this new container we won’t have \nany data in the volume, as Code Listing 38 shows. \nCode Listing 38: Listing the Contents of a Mounted Volume \nroot@1f5bf6d15d52:/# ls -l /v1 \ntotal 0 \nWhen we create a file, however, it will be available to the container and to the host because the \ndata will persist in a known location when the container is removed. In Code Listing 39, we add \na new file to the volume and leave the container. \nCode Listing 39: Writing Data in a Mounted Volume \nroot@1f5bf6d15d52:/# touch /v1/mappedfile1.es.txt \nroot@1f5bf6d15d52:/# ls -l /v1 \ntotal 8 \n-rw-r--r-- 1 root root 0 Aug 20 18:42 mappedfile1.es.txt \nroot@1f5bf6d15d52:/# exit \nNow we have the file on the host, which means that if we start a new container with the same \ndata volume mount, we will see the file from the first container, as in Code Listing 40. \nCode Listing 40: Running a New Container with a Mounted Volume \n$ docker container run -it --rm -v ~/v1:/v1 dockersuccinctly/ubuntu-with-volume \nroot@642cebc0e1be:/# ls -l /v1 \ntotal 8 \n-rw-r--r-- 1 root root 0 Aug 20 18:42 mappedfile1.es.txt \nThe original file from the image has still not been copied in, but the file from the previous \ncontainer is available even though that container has been removed. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":44}}}],["6e913bd2-ac38-47db-ae25-06a4316062ac",{"pageContent":" \n \n45 \n \n Tip: It’s good to be clear on the different ways of using Docker volumes. Many images \non the Hub use volumes for variable data, such as configuration files, or for permanent \nstate, such as database files. The Nginx image is a good example—it has a volume \ndefined for website content, and if you mount the volume from a local directory \ncontaining your website files, you can run your site in an Nginx container directly from \nthe official image without having to build your own image.  \nMounting a local directory into a container enables many scenarios, but mounting is limited if \nyou need to move your container to a different host—the data it needs will no longer be \navailable on the new host. For those scenarios, Docker supports shared storage engines as the \nsource for volume mounts through the volume plugin architecture. You can choose a volume \nplugin that matches your architecture and mount volumes from a shared location available from \nany host. \nFor cloud deployments, there are plugins that let you share storage using the platform’s \nservices—for example, Azure File Storage in Azure or Persistent Disks in Google Compute. \nThose options are useful when you have clusters of hosts running in a Docker swarm, which \nwe’ll look at in Chapter 6, Clustering Hosts with Docker Swarm. \nSharing data volumes \nData volumes exist outside of a container, which means any data written to them persists even \nwhen the container isn’t running or has been removed. That also means a container’s volumes \ncan be shared between containers from the same image or different images, which is useful for \nscenarios such as backing up databases. You might have a database running in a long-running \ncontainer and run a task container to back up the data files, sharing the volume from the \ndatabase container. \n Tip: You may find documentation that recommends using a data-only container that \nruns a container from a lightweight image, such as BusyBox with a data volume. In order \nto make use of this as a data container, stop the container immediately so that it doesn’t \nuse any compute—use it only for sharing the volume to other containers. This was \ncommon with earlier versions of Docker, before host volume mounting was introduced, \nbut now it isn’t needed. \nWe can demonstrate sharing volumes for the backup scenario with the official MongoDB image \nby using the command in Code Listing 41 to run a Mongo database in a background container. \nCode Listing 41: Running MongoDB in a Container \n$ docker container run -d --name mongo mongo ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":45}}}],["ccb54d79-41f6-425c-9c06-01b36dbd03e2",{"pageContent":" \n \n46 \nThe Mongo image stores database files in a volume named /data/db that we can access in a \nseparate container by running it with the --volumes-from option, which shares the volumes \nfrom the named container in the new container. In Code Listing 42, we run an interactive \ncontainer with access to the database’s volumes and list the Mongo data directory contents. \nCode Listing 42: Viewing Mongo Data from Another Container \n$ docker container run -it --volumes-from mongo ubuntu \nroot@c1bec125113a:/# ls -l /data/db \ntotal 136 \n-rw-r--r-- 1 999 999    46 Aug 20 20:04 WiredTiger \n-rw-r--r-- 1 999 999    21 Aug 20 20:04 WiredTiger.lock \n-rw-r--r-- 1 999 999   915 Aug 20 20:06 WiredTiger.turtle \n-rw-r--r-- 1 999 999 40960 Aug 20 20:06 WiredTiger.wt \n-rw-r--r-- 1 999 999  4096 Aug 20 20:04 WiredTigerLAS.wt \n-rw-r--r-- 1 999 999 16384 Aug 20 20:05 _mdb_catalog.wt \n-rw-r--r-- 1 999 999 16384 Aug 20 20:05 collection-0--6297223593488391649.wt \ndrwxr-xr-x 2 999 999  4096 Aug 20 20:06 diagnostic.data \n-rw-r--r-- 1 999 999 16384 Aug 20 20:05 index-1--6297223593488391649.wt \ndrwxr-xr-x 2 999 999  4096 Aug 20 20:04 journal \n-rw-r--r-- 1 999 999     2 Aug 20 20:04 mongod.lock \n-rw-r--r-- 1 999 999 16384 Aug 20 20:06 sizeStorer.wt \n-rw-r--r-- 1 999 999    95 Aug 20 20:04 storage.bson \nIn the new container, the data volume from the Mongo container has the same path—/data/db. \nThe new container can see the files created by Mongo in order to physically store the \ndatabases, which means you can simply use tar to back up all of them to a single archive. This \nis obviously not a robust backup strategy for a production database, but it is a simple approach \nthat can be useful for testing or development, or to back up and restore the known state. \nThe volume for this container is stored on the host machine, but because it’s not using a mount \nsource, we don’t know where the data is physically stored. The docker container inspect \ncommand gives us that information along with a lot of extra details about the container. Code \nListing 43 shows an extract of the output that focuses on the Mounts section, which lists the \nvolumes in use by the container. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":46}}}],["ef182d36-1383-4a90-b1d5-d4af2fed4655",{"pageContent":" \n \n47 \nCode Listing 43: Inspecting Volume Mounts \n$ docker container inspect mongo \n... \n        \"Mounts\": [ \n            { \n                \"Name\": \n\"bb05dc88f914ee0129efc68cc1221659a279cb26de0c9742712bdcd6faac464e\", \n                \"Source\": \n\"/var/lib/docker/volumes/bb05dc88f914ee0129efc68cc1221659a279cb26de0c9742712bdcd6faac\n464e/_data\", \n                \"Destination\": \"/data/db\", \n                \"Driver\": \"local\", \n                \"Mode\": \"\", \n                \"RW\": true, \n                \"Propagation\": \"\" \n            } \n... \nThe key information here is the RW flag, which tells us this is a read-write volume (Docker also \nallows containers to run with read-only volumes), and the Source, which tells us where the data \nis actually stored on the host. Code Listing 44 shows that we can view the content of the volume \nsource on the host machine too, provided we have permission to access it. \nCode Listing 44: Listing Volume Contents from the Host \n$ sudo ls -l \n/var/lib/docker/volumes/bb05dc88f914ee0129efc68cc1221659a279cb26de0c9742712bdcd6faac4\n64e/_data \ntotal 120 \ndrwxr-xr-x 2 999 docker  4096 Aug 20 21:40 diagnostic.data \n-rw-r--r-- 1 999 docker 16384 Aug 20 21:05 index-1--6297223593488391649.wt \n-rw-r--r-- 1 999 docker 16384 Aug 20 21:05 collection-0--6297223593488391649.wt \ndrwxr-xr-x 2 999 docker  4096 Aug 20 21:04 journal \n... ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":47}}}],["24b666e2-1015-4e69-bba2-3204057878a3",{"pageContent":" \n \n48 \nThis is the physical storage location for the files on the host. Containers can see this data in the \nvolume thanks to the virtual filesystem mounting the data into the container. The container \ndoesn’t get a copy of the files—it uses the originals directly. If you’re running Linux containers \non Docker for Mac or Docker for Windows, remember the “host” is really a Linux VM, so you \nwon’t see the files on your physical machine.  \n Note: From the host, and from containers that share the data volume, file \npermissions are preserved from the original container. In this case, all the data files are \nwritable from outside the Mongo container, which means that an external process can \nmodify or delete data and potentially corrupt the database. If you need to read data in \nanother container, you can use the :ro flag to make the target volume read-only, e.g., --\nvolumes-from mongo:ro. Checking the contents of the volume on the host is sometimes \nuseful for tracing issues, but in general you shouldn’t poke around in /var/lib/docker, \nwhich is where the Docker Engine keeps its data. \nRemoving containers, data volumes, and images \nContainers end when the process inside them finishes or when they are externally ended with \nthe docker container kill or docker container stop commands. But the container isn’t \nremoved—it’s just stopped. The docker container ls command won’t show the container \nunless you add the --all flag, which will list all containers, including the stopped ones. \nIf you view Docker as a host for short-lived task containers, this might seem surprising, but there \nis a consistent approach for all types of containers. A background service container might be \nstopped and restarted, and while it is stopped you’d expect the container to exist with all its \ndata. For single-task and interactive containers, it’s good practice to use the --rm flag when you \nstart the container so that Docker will automatically remove the container when it ends. \nTo explicitly remove containers, use the docker container rm command and specify \ncontainers by their ID or name, as in Code Listing 45. \nCode Listing 45: Stopping and Removing a Container \n$ docker container stop mongo \nmongo \n$ docker container rm mongo \nmongo \nRunning containers are not deleted when you run the rm command, which means you can chain \nrm with docker container ls to remove all stopped containers, as in Code Listing 46. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":48}}}],["56c73f15-89a9-4004-a2e1-5a5aaa77ac59",{"pageContent":" \n \n49 \nCode Listing 46: Removing All Stopped Containers \n$ docker container rm $(docker container ls -a -q) \nc28b88ef8354 \nc1bec125113a \nc960a3f90043 \n... \n Note: This is Linux syntax, but on Windows machines you can use the exact same \nsyntax in PowerShell. \nYou should also be aware that when you remove a container that has a data volume, the data \nvolume is not automatically removed. In order to remove the data volume along with the \ncontainer, you need to explicitly state it with the -v option: docker container rm -v \n{container}. \nWe’ve stopped the Mongo database container and removed it, but we didn’t use the -v flag, so \nthe data volume with all the database files continues to exist as a directory on the host machine. \nThis is called a dangling volume because there’s no container available and it’s simply using up \nspace on your host drive. With the Docker CLI you can list all the dangling volumes and chain \nthat command with volume rm to remove all the dangling volumes, as in Code Listing 47. \nCode Listing 47: Listing and Removing Dangling Volumes \n$ docker volume ls -qf dangling=true \n06d3a6e04d0dfc6034a5c589ac4d5f1ae2a55079052c9b7370c7f060d3e39f5a \n09f6df5ecb28f92127d06f2ff3a8724f018e82e0c9bbbc4eb4e28917bd4d8542 \n0d322921340a086be82c413ac047c841d834a1592aac1266f5c4caf0cb644d44 \n... \n$ docker volume rm $(docker volume ls -qf dangling=true) \n06d3a6e04d0dfc6034a5c589ac4d5f1ae2a55079052c9b7370c7f060d3e39f5a \n09f6df5ecb28f92127d06f2ff3a8724f018e82e0c9bbbc4eb4e28917bd4d8542 \n0d322921340a086be82c413ac047c841d834a1592aac1266f5c4caf0cb644d44 \n... ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":49}}}],["746f107c-46cf-4e2b-b2c8-fcf71d1bbcea",{"pageContent":" \n \n50 \nIn development and test environments, it’s easy to find yourself with a large number of stopped \ncontainers and dangling volumes, so it’s good practice to put these commands in a cleanup \nscript that you run regularly. The machines on which you regularly build images or pull images \nto try out can end up with a large image cache. Images are never automatically removed by \nDocker—they must always be explicitly deleted with the docker image rm command. \nAs with volumes, the Docker CLI includes the concept of dangling images—Docker images that \nare in the cache but have no containers based off them. You can combine a list of dangling \nimages with the image rm command in order to remove unused images and reclaim a lot of disk \nspace, as in Code Listing 48. \nCode Listing 48: Listing and Deleting Dangling Images \n$ docker image rm $(docker image ls -f \"dangling=true\" -q) \nDeleted: sha256:9417bb0f80a5c5eeb72e9aa8fd1a43dc13ce322cf49b1640a3c39f0f994a8b9b \nDeleted: sha256:b445166061334c8c206e1d7be26cab455e022f781dce1f916f195d2292b18df2 \nDeleted: sha256:f4b91f407b83bd8bc0c20063fdadab06af1f2d6c6de7a3fd6bf6c2f55d8928ca \n... \n Note: The CLI also has the docker system prune command, which you can use to \nremove all unused containers, volumes, and images. \nSummary \nWe’ve explored storage mechanisms in Docker and looked at data volumes and the different \nways volumes can be mounted and shared. We’ve seen that you can provide access to data in \ncontainers by mounting volumes from paths on the host or on a storage platform using a volume \nplugin. Alternatively, you can explicitly share the volumes from one container with other \ncontainers, allowing many containers to access the same data.  \nVolumes and containers persist even when the container has stopped running, and this can clog \nup your disk. We saw some useful commands for cleaning up volumes, containers, and images. \nYou can run a system prune on a schedule that ensures your environments will stay clean. \nIf you share volumes between containers, you must be mindful that many processes can \nattempt to access the same files and end up overwriting or corrupting data. In order to prevent \nthat, data volumes can be shared with read-only access that supports scenarios such as \ncreating backups or indexing data without the risk of modifying it. Docker also has functionality \nfor connecting containers at a higher level so that they can share state without sharing data. We \nwill look at orchestrating with Docker in the next chapter. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":50}}}],["13ca8631-7218-4fe0-8fff-877a7f8aca48",{"pageContent":" \n \n51 \nChapter 5  Orchestrating Systems with \nDocker \nOrchestrating multicontainer solutions \nWhen you break down a large application into smaller parts with each part running in a separate \ncontainer, you’ll need a way for containers to work together. That’s called orchestration. \nOrchestration requires a framework that allows communication between containers, \nconfiguration of how containers need to be connected, scheduling for container creation, \nmonitoring of health, and scaling. There are external platforms for container orchestration—\nMesos and Kubernetes are popular—but Docker has orchestration built into the platform. \nIn this chapter, we’ll look at Docker networking, which is a virtual networking layer that \nunderpins communication between containers. With Docker networks you can segregate traffic \non your host, allowing you to isolate groups of containers while allowing them to talk to each \nother. For defining the relationships between containers, we’ll look at Docker Compose, which is \na client-side tool that works with the Docker service API. \nThe other side of orchestration is managing containers across multiple hosts, as you would do \nin a production environment in order to provide scale and reliability. We’ll cover that in Chapter \n6, Clustering Hosts with Docker Swarm, and we’ll see how to apply what we learn in this chapter \nto a cluster of Docker hosts. \nDocker networks \nDocker is the platform for your application runtime, and it controls how your container interacts \nwith resources from the host. You can set memory and CPU restrictions on containers, and \nwhen your app runs it only sees the resources allocated to it. At the network level, Docker \ncreates a bridge network on your host. A bridge network gives every container its own IP \naddress, and it allows communication between containers and also between containers and the \nhost. \n Note: There are other types of networks supported by Docker. The bridge network is \nfor working with containers on a single host. The overlay network is for working with \ncontainers that run across multiple hosts. There is also a plugin system that lets you use \nthird-party network types. \nCreating a network in Docker is easy. Bridge networks are the default, which means you simply \nneed to give the network a name, as in Code Listing 49. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":51}}}],["9798cb56-10ae-454a-b566-ab8d75936679",{"pageContent":" \n \n52 \nCode Listing 49: Creating a Bridge Network \n$ docker network create ch05 \nffe636469bc2820e19438f09c9fe484e129879e37c7f93059b7d7fa03ae164fe \nAs usual, when you create an object, Docker responds with a large ID that you can use to refer \nto the object (or you can refer to the object by its name as well). The bridge network is created \nwith a designated IP address range, and every container in the network will have a dedicated IP \naddress in that range. This is the simplest way to connect containers. In Code Listing 50, we \nstart an Nginx container in the background that joins the new network. \nCode Listing 50: Running a Container in the Network \n$ docker container run -d --name webcontainer --network ch05 nginx:alpine \nThe --network option tells Docker to join this container into the ch05 network we’ve created, \nwhich means it will get an IP address from the network’s range. Note that we haven’t published \nport 80 on the container, so we can’t browse to localhost to see the site, but we can browse to \nthe container’s IP address.  \nWe can get the IP address either by inspecting the container or the network. The network \ninspect command in Code Listing 51 lists all the containers in the network and their IP \naddresses. \nCode Listing 51: Inspecting the Network \n$ docker network inspect ch05 \n[ \n    { \n        \"Name\": \"ch05\", \n        \"Id\": \"ffe636469bc2820e19438f09c9fe484e129879e37c7f93059b7d7fa03ae164fe\", \n        \"Scope\": \"local\", \n        \"Driver\": \"bridge\", \n... \n        \"Containers\": { \n            \"e7c511c50943853a9307b859f5290f08ce208380e459d17a858dad6f995ee250\": { \n                \"Name\": \"webcontainer\", \n                \"EndpointID\": \n\"a65f4cb72fb3c28452fbde375b9a0224605daf89501d0d9e26b2788d03137aa9\", ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":52}}}],["c773eb5b-4fad-44a4-87a7-02fa9226447b",{"pageContent":" \n \n53 \n                \"MacAddress\": \"02:42:ac:14:00:02\", \n                \"IPv4Address\": \"172.20.0.2/16\", \n                \"IPv6Address\": \"\" \n            } \n        }, \n        \"Options\": {}, \n        \"Labels\": {} \n    } \n] \nThe subnet range for this network is 172.20.0.0, and it’s a class B network that allows 65536 \nIP addresses. The Nginx container, called webcontainer, has the IP address 172.20.0.2, \nand, because it’s a bridge network, we can access that from the host, as we see in Figure 8. \n \nFigure 8: Browsing to the Container’s IP Address \n Note: The bridge is between the container and the host. If you’re running on Linux \nyou can access containers by their IP address. On Docker for Mac and Docker for \nWindows, remember the host is a Linux VM, so you can’t connect directly to the \ncontainer IP address from your host machine. \nNow we can start a second container in the same network, but we’ll run it interactively so that \nwe can see how the network connections are set up with the Linux ip command, as in Code \nListing 52. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":53}}}],["59849945-d0f4-4c00-bc15-c4a9f19a0991",{"pageContent":" \n \n54 \nCode Listing 52: Running a Second Container in the Network \n$ docker container run -it --rm --network ch05 sixeyed/ubuntu-with-utils \nroot@acda23507c84:/# ip -f inet address \n... \n16: eth0@if17: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP \ngroup default  link-netnsid 0 \n    inet 172.20.0.3/16 scope global eth0 \nThis container has IP address 172.20.0.3, which means it’s in the same subnet as the Nginx \ncontainer. Docker has a built-in DNS server, so containers on the same network can access \neach other by name as well as by IP address, as we can see with the dig and ping commands \nin Code Listing 53. \nCode Listing 53: Querying the Docker Network \n# dig webcontainer \n... \n;; ANSWER SECTION: \nwebcontainer.  600 IN A 172.20.0.2 \n \n# ping webcontainer -c 2 \nPING webcontainer (172.20.0.2) 56(84) bytes of data. \n64 bytes from webcontainer.ch05 (172.20.0.2): icmp_seq=1 ttl=64 time=0.086 ms \n64 bytes from webcontainer.ch05 (172.20.0.2): icmp_seq=2 ttl=64 time=0.092 ms \n Note: Before Docker had a DNS server, you connected containers by using the --\nlink flag when you ran them, and that created entries in the hosts file on the container \nso that you could refer to linked containers by name. That functionality is preserved for \nbackwards compatibility, but it’s a basic mechanism and it’s no longer needed. If you’re \nfollowing an old tutorial that uses --link, merely replace it with --network and your \ncontainers can communicate by name. \nThe DNS server in Docker makes application configuration easy in a multicontainer system \nbecause, in your applications, you simply refer to dependencies by their container name. If you \nhave a database container called mysql, the connection string in your web app can always use \nmysql as the server name. You don’t need to switch connection strings for different \nenvironments—provided you orchestrate the same way in every environment, the landscape will \nalways look the same to the apps. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":54}}}],["2bc92775-25ff-4849-a289-1b8a17626999",{"pageContent":" \n \n55 \nWhen you make assumptions about server names in your system, orchestration becomes a key \npart of your delivery. Using Docker gives you a consistent set of packaged applications, but you \ndon’t want to rely on a deployment document to ensure they get orchestrated correctly. For that, \nyou can use Docker Compose. \nDocker Compose \nAs you begin delivering more complex apps with more moving parts, the orchestration of your \ncontainers becomes more involved, and you will need to capture the dependencies so that you \ncan deploy reliably and repeatedly. One option for doing so is Docker Compose, a separate \nclient tool that lets you define your solution architecture in a YAML file, and then manage a \nwhole set of containers with a single command. \n Tip: Docker Compose comes bundled with Docker for Mac, Docker for Windows, and \nthe Docker Toolbox. On Linux, it’s a separate install, so you’ll need to follow the \ninstructions to install Docker Compose. \nThe Docker Compose syntax takes the arguments available in the docker container run \ncommand and structures them as YAML. You specify an image to run from, container names, \nports to expose, volumes to map, and networks—all the major command-line options are \nsupported by Compose. Code Listing 54 shows a full Docker Compose file that will orchestrate \nthe two containers we started manually. \nCode Listing 54: Docker Compose YAML File \nversion: '2' \nservices: \n    web: \n        image: nginx:alpine \n    util: \n        image: sixeyed/ubuntu-with-utils \n        container_name: util \n        command: ping web \nThe first line defines this as using version 2 of the Docker Compose file format. In Compose, \nyou define containers to run as services, then you specify the image name and any other \noptional properties, such as the container name and command in this example. \nBy convention, Compose files are named docker-compose.yml. From the directory where the \nYAML file is saved, you can start all the services in the Compose file as containers by running \nthe up command, as in Code Listing 55. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":55}}}],["e1feecf6-2813-4a19-b4c9-e2c3bd78b80b",{"pageContent":" \n \n56 \nCode Listing 55: Starting Services with Docker Compose \n$ docker-compose up -d \nAs with the Docker CLI, we can specify -d to daemonize all the containers and keep them \nrunning in the background. The container service called util has a command specified in the \nCompose file that is a long-running command, which means both containers will stay running \nuntil we stop them.  \nAlthough we started the containers using Docker Compose, these are just normal Docker \ncontainers and we can work with them with the Docker CLI in the normal way. Code Listing 56 \nshows the container ls command listing all the running containers. \nCode Listing 56: Containers Running from Docker Compose \n$ docker container ls \nCONTAINER ID        IMAGE                       COMMAND                  CREATED             \nSTATUS              PORTS                         NAMES \n420b4928a92d        nginx:alpine                \"nginx -g 'daemon off\"   2 minutes \nago       Up 2 minutes        0.0.0.0:80->80/tcp, 443/tcp   sample01_web_1 \n7262c0b6367d        sixeyed/ubuntu-with-utils   \"ping web\"               2 minutes \nago       Up 2 minutes                                      util \nThe Nginx container has a name generated by Compose that uses the project name sample01, \nwhich is derived by combining the folder where the docker-compose.yml file is on my machine \nwith the service name web and the instance of the container: sample01_web_1. The utility \ncontainer has the fixed name util, as specified in the Compose file.  \nThe utility container pings the Nginx container by the service name web, which is specified in the \nCompose file—not by the container name, which isn’t known until runtime. If we check the logs, \nwe’ll see the Nginx container is responding to pings on the service name, as in Code Listing 57. \nCode Listing 57: Checking Logs from a Container \n$ docker container logs util \nPING web (172.21.0.3) 56(84) bytes of data. \n64 bytes from sample01_web_1.sample01_default (172.21.0.3): icmp_seq=1 ttl=64 \ntime=0.092 ms \n64 bytes from sample01_web_1.sample01_default (172.21.0.3): icmp_seq=2 ttl=64 \ntime=0.055 ms \n64 bytes from sample01_web_1.sample01_default (172.21.0.3): icmp_seq=3 ttl=64 \ntime=0.057 ms ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":56}}}],["b1c34faf-9d9a-4eb4-bd1b-c2bb5009260c",{"pageContent":" \n \n57 \n Note: Docker has different logging providers that can be used to direct the standard \noutput and standard error streams to different destinations. If you don’t specify a \nprovider, the default allows you to see the output from containers using the logs \ncommand. \nThe Nginx container has a generated name because Compose lets you scale up by adding \nmore containers and because it needs to ensure the name is unique. We can add more Nginx \ncontainers with the scale option to the up command in Code Listing 58, which specifies the \ndesired number of containers. \nCode Listing 58: Scaling Services with Docker Compose \n$ docker-compose up –d --scale web=5 \nCreating and starting sample01_web_2 ... done \nCreating and starting sample01_web_3 ... done \nCreating and starting sample01_web_4 ... done \nCreating and starting sample01_web_5 ... done \nIf we now connect to the util container, we can see that the DNS server in Docker returns all \nfive Nginx containers when you query it, as in Code Listing 59. \nCode Listing 59: Querying the Docker DNS Server \n$ docker container exec -it util bash \nroot@b9594d7abca1:/# dig web \n... \n;; ANSWER SECTION: \nweb.   600 IN A 172.21.0.5 \nweb.   600 IN A 172.21.0.4 \nweb.   600 IN A 172.21.0.6 \nweb.   600 IN A 172.21.0.3 \nweb.   600 IN A 172.21.0.7 \n Note: The DNS server in Docker actually supports load balancing, too, which means \nthat if you repeat the dig command, the addresses in the response come back in a \ndifferent order, which is a simple way of balancing load across the containers. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":57}}}],["2475345d-c65d-4cfc-bfe5-b48d6775c7c6",{"pageContent":" \n \n58 \nThe IP addresses of the containers start with 172.21.0—a different range from the network we \nexplicitly created earlier in the chapter. Docker Compose creates a different network for each \nproject, each named after the directory in which the Compose file lives.  \nWhen I list my networks with the network ls command in Code Listing 60, I can see some \ndefault networks created by Docker, the ch05 network I created manually and the \nsample01_default network created by Docker Compose. \nCode Listing 60: Listing Docker Networks \n$ docker network ls \nNETWORK ID          NAME                DRIVER              SCOPE \nffe636469bc2        ch05                bridge              local                \nef5358de1913        docker_default      bridge              local                \n5c600195c84b        host                host                local                \ne78c673dd3f9        none                null                local                \n30771928757e        sample01_default    bridge              local \nYou can administer all the containers in your Compose project with single commands. These \nare typically the Docker CLI commands transplanted to Docker Compose. In Code Listing 61, \nwe stop all the containers, check that none are running, then start them again. \nCode Listing 61: Stopping and Starting Containers with Compose \n$ docker-compose stop \nStopping sample01_web_5 ... done \nStopping sample01_web_4 ... done \nStopping sample01_web_2 ... done \nStopping sample01_web_3 ... done \nStopping sample01_web_1 ... done \nStopping util ... done \n \n$ docker container ls \nCONTAINER ID        IMAGE               COMMAND             CREATED             \nSTATUS              PORTS               NAMES \n ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":58}}}],["f771076d-b9ce-4ae8-a2d5-f7e1d034d945",{"pageContent":" \n \n59 \n$ docker-compose start \nStarting util ... done \nStarting web ... done \n Tip: Other commands, such as kill and rm, are available in Docker Compose, but it’s \nimportant to remember that Compose is a client-side tool. When you create services with \nCompose, Docker has no notion that they’re related (other than being in the same \nnetwork). In order to manage the services as a single unit, you work in the directory on \nyour client machine where the docker-compose.yml file lives. \nWith Docker Compose, you can orchestrate complex applications by linking containers together \nand running them inside a Docker network. Distributed solutions such as the example in Figure \n9 can be captured at the infrastructure level in a Compose file. \n \nFigure 9: A Distributed System in Docker \nEach component in the stack refers to its dependencies by name (msgq and db), and that will be \nconsistent for every environment in which the containers are in the same network, even if they \nare running at different levels of scale (which means there’s no change to application \nconfiguration).  ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":59}}}],["661ba90c-5d95-4376-bb28-47756da182c4",{"pageContent":" \n \n60 \nMore advanced features exist than we can cover in a Succinctly title, but the key concept is that \nthe network looks the same from the inside, so containers only need to know each other’s \nnames. From the outside, the network might be a simple bridge network on a single host, such \nas a developer’s laptop or an overlay network across multiple servers in a datacenter—the \napplication code and the container orchestration are the same. \nSummary \nApplication containers are lightweight, portable units. Breaking a large system down into many \nsmall containers means you can scale components independently at runtime so that you can \ndirect compute power where it will bring the most benefit. It also means different parts of your \napp can have different release cycles, which allows you to release high-value components more \nfrequently and give value to the business more quickly. \nDocker supports that with simple but powerful mechanisms for orchestrating multicontainer \nsolutions. With Docker networking, you can set up an isolated network between a group of \ncontainers with built-in DNS so that containers can communicate with each other transparently \nby their names. That lets you run multiple distributed systems on a single set of infrastructure. \nFor cases in which you have a complex deployment with many containers, you can use Docker \nCompose to explicitly orchestrate the dependencies. With Compose, you define all your \ncontainers in a single place and you can manage an entire system as a single entity. Now that \nyou know how to manage multiple containers with Docker, in the next chapter we’ll look at \nmanaging multiple Docker hosts in a cluster, using a Docker swarm. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":60}}}],["08f344b8-5563-4510-be38-e870d49b8c3b",{"pageContent":" \n \n61 \nChapter 6  Clustering Hosts with Docker \nSwarm \nClustering with Docker swarm mode \nYou start to see the real power of Docker when your application is packaged and you’re ready \nto deploy to production. In most cases, you’ll want redundancy for your app so that if the server \nhosting it goes down, another server can take over; and you’ll want the ability to scale so that \nmultiple servers can all run the app and share the workload between them. Docker has native \nsupport for that with Docker swarm mode, which lets you join multiple machines running Docker \ninto a cluster that provides scale and redundancy. \nSwarm mode is an optional feature in Docker. You can run Docker as a standalone host, as \nwe’ve done so far, or you can join that same host to a swarm with a single command. When you \nhave multiple machines running in a swarm, you start containers in a similar way, but you can \nspecify how many instances of the container you want to run. You make a request to the swarm, \nand, based on the resources available, Docker decides which hosts will actually run the \ncontainers. \nIt’s incredibly easy to set up a Docker Swarm, and you can add and remove nodes while the \nswarm is running in order to manage your overall capacity. The swarm supports Docker \nnetworking, which means your containers can all communicate, and it monitors instances the \nentire time. If a host goes down and the number of containers running your app falls below what \nyou requested, Docker will start new instances on other hosts in order to ensure the service \nlevel is correct. In this chapter, we’ll see how swarm mode works and how to run containers on \na swarm. \nCreating a Docker swarm  \nDocker swarm follows a manager-worker architecture in which the manager schedules work on \nthe workers. In a swarm, the type of work is always the same—running containers—and Docker \nis slightly unusual in that containers can run on the manager nodes, too. A manager node must \nbe running for the swarm to operate correctly. You can have multiple nodes designated as \nmanagers in order to provide high availability, but only one is active—the leader. \n Tip: Docker swarm mode uses the Raft Consensus Algorithm for electing a new leader \nmanager node if the current one is lost. Like similar algorithms, Raft relies on a majority \nelection, which means you should have an odd number of manager nodes in order to \navoid tied elections—three or five is common. Because Docker swarm managers can run \ncontainers, too, your secondary managers can work and you won't have wasted compute \nin your swarm. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":61}}}],["e6ba00de-3f10-4ffc-add7-dc9bd876b2b1",{"pageContent":" \n \n62 \nCreating a swarm is easy. You’ll need a number of machines (or VMs) set up, and the only \nprerequisites for the machines are: \n• Docker installed, version 1.12 or higher \n• Ports 2377, 7946, and 4789 open so the machines can communicate \nWhen you create your swarm, Docker will provision certificates and ensure that communication \nbetween all the nodes is encrypted. The specified ports need to be open between the nodes, \nbut they don’t need to be public, and you can restrict access at the infrastructure layer. For \ninstance, in Microsoft Azure you would create all your VMs in a virtual network and only open \nthe ports to other machines from the virtual network, which means access from the public \nInternet would be blocked. \n Note: Docker 1.12 introduced swarm mode, which means that is the minimum \nversion you can use. Prior to 1.12, Docker Swarm was a separate product. You can still \nuse the old Docker Swarm to cluster multiple Docker hosts, but it is far more complicated \nto set up, and there are no advantages to using it over the newer swarm mode.  \nWith the machines ready to go, choose one to be the master, note its IP address, and create a \nswarm using the swarm init command. I have three VMs in Azure running Ubuntu, which have \nDocker installed, and I'm going to make them into a swarm. In Code Listing 62, I create the \nswarm from the machine with the internal IP address 10.0.0.4, which switches this Docker host \ninto swarm mode and sets it as the manager for the swarm. \nCode Listing 62: Creating a Docker Swarm \n$ docker swarm init --advertise-addr 10.0.0.4 \nSwarm initialized: current node (am2avhyv52mr05yernr2t9ug8) is now a manager. \nTo add a worker to this swarm, run the following command: \n    docker swarm join \\ \n    --token SWMTKN-1-637apaa2992zallyfvw6iudobr6vai830h65tkk16mee8nw2u0-\n15ofjpt6mt4r1yy1jgg9buyb6 \\ \n    10.0.0.4:2377 \nIn the init command, you need only to specify the IP address from which the master will listen \nfor nodes if the manager has multiple IP addresses, but specifying the address is useful as a \nmatter of course so that you’ll know exactly where the manager is advertising for new joiners. \nThat command is all you need. This is a functional swarm now, albeit with a single node, and \nnow you can add the rest of your worker nodes.  \nThe output from swarm init gives you a token that you use to join more nodes to the swarm. \nThe token is a security measure that prevents any nodes joining the swarm unless you share \nthe token with them—you should treat it carefully, like any other security secret. In Code Listing \n63, I join another Azure VM to the swarm. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":62}}}],["f5841a7d-8e97-41d3-ab2f-92c63af75f55",{"pageContent":" \n \n63 \nCode Listing 63: Joining the Swarm \n    $ docker swarm join \\ \n>     --token SWMTKN-1-637apaa2992zallyfvw6iudobr6vai830h65tkk16mee8nw2u0-\n15ofjpt6mt4r1yy1jgg9buyb6 \\ \n>     10.0.0.4:2377 \nThis node joined a swarm as a worker. \nThe swarm join command specifies the secret token and the advertised address of the master, \nand the output shows the nodes have been accepted as workers, so now I have a multinode \nswarm. Now that we’re in swarm mode, managing nodes and containers is a little different, and \ncertain commands work only on the manager. Because that is true, and also because worker \nnodes can come and go, it’s best to work with Docker on the manager. \nWorking with Docker swarm  \nUsing Docker in swarm mode brings us two new concepts. First, all the machines in the swarm \nare called nodes, and you manage them with a set of node commands. Second, you don’t run \ncontainers on the swarm, you work at a higher level with services. Running a service is like \nrunning a container—it gets created from a Docker image in the same way—but a service can \nrun as multiple instances of a container. \nFrom the swarm manager, you can see all the nodes in the swarm and the current status with \nthe node ls command, as in Code Listing 64 (in which I’ve added a third node to the swarm). \nCode Listing 64: Listing Nodes in a Swarm \n$ docker node ls \nID                           HOSTNAME         STATUS  AVAILABILITY  MANAGER STATUS \n8smbcf360or1257jt5d3fj32i    swarm-02   Ready   Active \naedcdczhcppw7qva7fdtvxmmj    swarm-01   Ready   Active \nam2avhyv52mr05yernr2t9ug8 *  swarm-00   Ready   Active        Leader \nThe output here tells us that machine swarm-00 is the leader manager node and that swarm-01 \nand swarm-02 are functioning worker nodes—with Active availability and Ready status. We’ll \nsee what happens when a node goes offline later in this chapter.  \nTo start a service on the swarm, use the service create command. Code Listing 65 shows \nthe usual Nginx web application being started as a service. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":63}}}],["422d1f1c-89e2-4f69-b238-c5e8be92d323",{"pageContent":" \n \n64 \nCode Listing 65: Running a Service on the Swarm \n$ docker service create --name website --publish 80:80 nginx:alpine \ncixz0vah486d81zo1ecw5fe2p \nCreating a service is a lot like running a container. You specify the image and any options for \nthe engine—for example, the service name and port publishing in this example. Nginx exposes \nport 80, and my Azure VMs are configured to allow port 80 requests from the Internet, which \nmeans I should be able to browse my website from any computer so long as I know the address \nof the node running the container. \nThe service ls command tells me which services are running, service ps tells me which \nhosts are running which containers, and Code Listing 66 shows me which VM I need to hit in \norder to access the website. \nCode Listing 66: Listing Services and Containers \n$ docker service ls \nID            NAME     REPLICAS  IMAGE         COMMAND \ncixz0vah486d  website  1/1       nginx:alpine \n$ docker service ps website \nID                         NAME       IMAGE         NODE             DESIRED STATE  \nCURRENT STATE          ERROR \n1w5lqx0lp4pnftqzl04m0kqiq  website.1  nginx:alpine  swarm-00  Running        2 \nminutes ago \nThe one container running on swarm-00 happens to be the manager. Now, if I browse to the \nmanager’s domain address, the port 80 request will be forwarded to the container running on \nthe node and I can see the website. Figure 10 shows the result. As we should expect, notice \nthat the hostname swarm-00 of the machine serving the response is the same as the VM to \nwhich I sent the request. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":64}}}],["65f4b0ad-f93b-4f5d-ab06-e304bb0db7ae",{"pageContent":" \n \n65 \n \nFigure 10: Browsing the Website on the Swarm Container \nWe can map our public web address to a specific host with a CNAME DNS entry, but we don’t \nwant to do that. If that host goes down, the swarm will recreate the container on another host, \nand we’d need to change the CNAME, which isn’t very flexible or scalable. However, one of the \ngreat things about Docker swarm mode is its built-in request routing, which lets you send a \nrequest to any node in the swarm, and if that node isn’t running a container that can service the \nrequest, it will transparently route the request to another node where the container is running. \nIn Code Listing 67, I’m making a web request with cURL to node swarm-01 that doesn’t have \nthe web container running. I still get the correct response, though—node swarm-01 has routed \nthe request to node swarm-00, where the web container is running, and it has relayed the \nresponse. \nCode Listing 67: Querying Another Swarm Node \n$ curl http://swarm-01.northeurope.cloudapp.azure.com/ \n<!DOCTYPE html> \n<html> \n<head> \n<title>Welcome to nginx!</title> \nThis feature is called the routing mesh, and it enables load balancing and failover. You can put \na load balancer in front of your swarm so that requests can be forwarded to any node, and if a \nnode gets a request it can’t handle, it will intelligently reroute the request to a node that can. \nSimilarly, if a node fails, its containers will be started on other nodes, and the services will still \nbe reachable through the routing mesh. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":65}}}],["d405a06c-39de-4668-a91d-04f76628ea30",{"pageContent":" \n \n66 \nScaling services \nThe services we’ve created so far have run with a single container instance on the swarm—\nthat’s the default setting for a new service. We can run multiple instances of a container using \nthe replicas option. Replica is the swarm terminology for an instance of a container, and as \nthe name suggests, these are replicas running from the same image with the same setup. The \nservices should be stateless so that requests can be handled by any container with the same \nresults. \nRunning multiple replicas with a load balancer means you can scale up your service by running \nit on more nodes. The replica level can be specified when services are created, and it can be \nchanged when services are running. The service scale command in Code Listing 68 adds \nanother four instances of my website container to the Swarm. \nCode Listing 68: Scaling a Swarm Service \n$ docker service scale website=5 \nwebsite scaled to 5 \nNow, when I check the service with the service ps command, as in Code Listing 69, I can see \nwhere the instances are running. In this case, I have more replicas than there are nodes in the \nswarm, which means nodes swarm-00 and swarm-02 have two replicas running and the node \nswarm-01 just has one. \nCode Listing 69: Listing Service Replicas \n$ docker service ps website \nID                         NAME       IMAGE         NODE             DESIRED STATE  \nCURRENT STATE             ERROR \n1w5lqx0lp4pnftqzl04m0kqiq  website.1  nginx:alpine  swarm-00  Running        Running \n13 minutes ago \n80qaxmk6fi836qyxc9n4i3o2n  website.2  nginx:alpine  swarm-01  Running        \nPreparing 12 seconds ago \neqvkkgax24vxpo6hq1wt17199  website.3  nginx:alpine  swarm-02  Running        Running \n4 seconds ago \n28z50bvlx7kakk403qib86dl4  website.4  nginx:alpine  swarm-02  Running        Running \n4 seconds ago \n4fp3992k7iq72nn0fobkdzwhs  website.5  nginx:alpine  swarm-00  Running        Running \n9 seconds ago ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":66}}}],["f95eb86c-8659-4990-a079-583b7083a507",{"pageContent":" \n \n67 \nIf I now make a request to a specific node, I’ll get a response from that node—all nodes have an \ninstance of the container running, which means they won’t need to reroute requests internally. I \nhave a load balancer set up in Azure that shares requests among all the VMs, which is outside \nof Docker at the infrastructure level. Using Apache Bench to test performance, with five replicas \nrunning across three nodes, I get served more than 180 requests per second, as Code Listing \n70 shows. \nCode Listing 70: Benchmarking the Swarm Service \n$ ab -n 3000 -c 150 http://docker-succinctly.northeurope.cloudapp.azure.com/ \n... \n \nBenchmarking docker-succinctly.northeurope.cloudapp.azure.com (be patient) \nCompleted 300 requests \nCompleted 600 requests \n... \n \nConcurrency Level:      150 \nTime taken for tests:   16.442 seconds \nComplete requests:      3000 \nFailed requests:        0 \nTotal transferred:      2535000 bytes \nHTML transferred:       1836000 bytes \nRequests per second:    182.46 [#/sec] (mean) \nTime per request:       822.088 [ms] (mean) \nTime per request:       5.481 [ms] (mean, across all concurrent requests) \nIf the service scale is reduced to a single replica, performance drops to fewer than 120 requests \nper second, as Code Listing 71 shows. \nCode Listing 71: Benchmarking a Single Replica \n$ ab -n 3000 -c 150 http://docker-succinctly.northeurope.cloudapp.azure.com/ \n... ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":67}}}],["cf424720-15ad-4673-a391-e8e83304162e",{"pageContent":" \n \n68 \nBenchmarking docker-succinctly.northeurope.cloudapp.azure.com (be patient) \nCompleted 300 requests \nCompleted 600 requests \n... \n \nConcurrency Level:      150 \nTime taken for tests:   25.840 seconds \nComplete requests:      3000 \nFailed requests:        0 \nTotal transferred:      2535000 bytes \nHTML transferred:       1836000 bytes \nRequests per second:    116.10 [#/sec] (mean) \nTime per request:       1292.008 [ms] (mean) \nTime per request:       8.613 [ms] (mean, across all concurrent requests) \nNginx is a highly performant web server in any circumstance, but running it as a service on a \nDocker swarm allows you to scale up in seconds with a single command and thereby drastically \nimprove performance. For more complex systems that perform more compute-to-serve \nrequests, the benefits from scaling up are even greater.  \n Tip: The routing mesh works at port level—if a node gets a request on a port from \nwhich there’s no container listening, it will forward the request on to another host that \ndoes have a container listening on that port. If you run only one service per port on your \nswarm, you don’t need a proxy—your load balancer and the swarm can handle it. If \nyou’re running multiple services with the same port, such as several websites all running \non port 80, you’ll need a proxy, like Nginx, running in the swarm. The proxy listens on \nport 80 while all your other services listen on custom ports, and Nginx routes traffic to \ndifferent ports based on the incoming HTTP request. \nThe manager node in the swarm constantly checks in with nodes and verifies that all services \nhave the correct replica level. When a node goes down, the swarm will create more containers \non other nodes in order to ensure the services run as requested. In Code Listing 72, I shut down \nnode swarm-02 in the swarm, which is currently running two of the Nginx containers. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":68}}}],["cfeddc57-41de-4ee1-9014-7f2d29d8f60a",{"pageContent":" \n \n69 \nCode Listing 72: Shutting Down a Worker Node \nelton@swarm-02:~$ sudo shutdown 0 \nWhen the node shuts down, the heartbeats to the manager stop and the manager quickly sees \nthat the node is unavailable. With that node down, my website service falls below the required \nreplica level, which means the manager will schedule new containers on the remaining nodes. \nCode Listing 73 shows the node ls command that tells me node swarm-02 is down, but the \nservice details show that there are still five containers running. \nCode Listing 73: Listing Nodes and Running Replicas \n$ docker node ls \nID                           HOSTNAME         STATUS  AVAILABILITY  MANAGER STATUS \n8smbcf360or1257jt5d3fj32i    swarm-02   Down    Active \naedcdczhcppw7qva7fdtvxmmj    swarm-01   Ready   Active \nam2avhyv52mr05yernr2t9ug8 *  swarm-00   Ready   Active        Leader \n \n$ docker service ps -f \"desired-state=running\" website \nID                         NAME       IMAGE         NODE             DESIRED STATE  \nCURRENT STATE           ERROR \n1w5lqx0lp4pnftqzl04m0kqiq  website.1  nginx:alpine  swarm-00  Running        Running \n36 minutes ago \nbpeyfjd5hll29rdiborxryj1t  website.2  nginx:alpine  swarm-01  Running        Running \n12 minutes ago \n5c2q4odd5vw62eyb6g4clrrz1  website.3  nginx:alpine  swarm-00  Running        Running \n13 seconds ago \nehlxvdq66adtjd9p53zs9i7y5  website.4  nginx:alpine  swarm-00  Running        Running \n13 seconds ago \n7pok5wg9ntfo4iy1zq9a983n6  website.5  nginx:alpine  swarm-01  Running        Running \n12 minutes ago \nThe containers that had been on node swarm-02 have been rescheduled on the other nodes so \nthat node swarm-00 now has three containers and node swarm-01 has two. \nThe swarm takes care of routing traffic to nodes and repairing services when nodes are \nunavailable, which means much of the hard work of managing distributed systems has been \ndealt with. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":69}}}],["2790b55c-a6ca-4178-a8a7-081256989b07",{"pageContent":" \n \n70 \nSummary \nDocker swarm mode is a clustering technology built into the Docker platform. You can create a \nswarm from multiple Docker hosts in minutes and have a cluster that can intelligently route \ntraffic between nodes and run scalable services as multiple instances of containers.  \nCommunication between nodes is all encrypted, and nodes don’t have to be on the same \noperating system or even the same platform, which means you can build hybrid swarms with \nLinux and Windows Server hosts. \nRunning a hybrid swarm with Windows and Linux nodes lets you migrate multiple existing \nworkloads into a single swarm, containerizing apps to use different base images—such as \nWindows Server Core for .NET Framework apps and Ubuntu Server for Linux apps. Your \napplications are all Docker images, and you can manage them in the same way, but at runtime \nyou can only run Windows-based containers on Windows hosts and Linux-based containers on \nLinux hosts. \nIn the next chapter, we’ll see how containers actually work and what Docker looks like on \ndifferent host platforms. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":70}}}],["ff6a8a17-217d-4e35-b660-383e6b00b374",{"pageContent":" \n \n71 \nChapter 7  Docker on Linux, Windows,  \nand ARM \nContainers and kernels \nWhen you run a Docker container on a Linux host, it runs in an isolated process boundary called \na namespace. Inside the container, the app thinks it’s running on its own computer with no other \nprocesses, but in fact the boundary is only a logical boundary and there can be many other \nprocesses running on the same physical host.  \nYou can see all the processes running inside and outside of your containers on the host \nmachine, but in the container you’ll only see the processes within the namespace boundary. \nFigure 11 shows how that looks on a Linux machine running multiple Nginx containers. \n \nFigure 11: Multiple Containers Running Nginx \nIf you were to run the top command inside one of the containers, you would see only a single \nnginx process. But if you run top on the host, you’ll see four nginx processes and the dockerd \nprocess, which is the server part of the Docker Engine, along with any other processes you \nhave running. \nThis is why Docker containers can run so efficiently—they use the underlying operating system \nkernel of the host machine so that processes inside the container are actually running on the \nhost. For a host, running multiple containers is the same as running multiple processes (unlike \nvirtual machines, for which each VM has its own kernel and a hypervisor running on the host in \norder to translate between the virtual kernel and the real kernel). ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":71}}}],["067f0f09-33cc-42eb-8cfe-4e7f2dc0dab6",{"pageContent":" \n \n72 \nThat is why you can’t run Linux containers on Windows or run Windows containers on Linux. A \ncontainer using Ubuntu as its base image needs to run on a Linux machine so that when the \ncontainer launches an executable, the host is capable of running it. Linux executables aren’t \ncompatible with Windows, which means you can’t run an Ubuntu-based container on Windows. \nIn this chapter, we’ll look at how Docker runs on different operating systems and see how you \ncan mix architectures. \nDocker on Linux \nLinux is the native operating system for Docker. Linux has long had the technology for running \ncontainers, but Docker brought the concept of packaging up images and running them as \ncontainers, which made it simple to take advantage of the underlying Linux features. When \nyou’re running Linux-based containers, you use a server-grade Linux distribution for your hosts, \nand Docker might be the only software you install. Everything else you’d want to run on your \nserver would run as a container in Docker. \nDocker is available in the package repositories for the major Linux distributions, and the only \nrequirement is that you have a reasonably recent version of the Linux kernel running on your \nhost. At the time of writing, the minimum Linux kernel is 3.10, which is an entire major version \nbehind the current release, which means Docker doesn’t demand an up-to-date operating \nsystem version. \nThe quickest way to install Docker on Linux is to run the helper script from get.docker.com in \nCode Listing 74. \nCode Listing 74: Installing Docker on Linux \n$ curl -sSL http://get.docker.com | sh \nDoing this will install Docker and the CLI on your machine, and you can run containers and \ncreate or join a swarm using the commands we’ve seen so far. The Docker package doesn’t \ninstall Docker Compose, but that’s a client-side tool that you’d normally have running on a \nseparate machine.  \n Tip:  It’s important that you install the correct version of Docker. The version included \nwith your Linux distribution is not likely to be the latest. If you don’t care to run a shell \nscript from the Internet, the Docker Store website has detailed instructions for all the \nsupported Linux distros.  \nYou can administer a Docker host remotely, and all the clients are compatible with the Engine \nso that you can run the Docker command line from a Windows or Mac machine to work with \ncontainers on a remote Linux host. \nIf you use systemd to run Docker as a service on Linux, which is the default init system with \nUbuntu, you get a lot of information from the status output. Code Listing 75 shows the output \nfrom a Docker Engine that isn’t currently running any containers. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":72}}}],["d5c60d95-ed33-43bc-a177-52e89595c07f",{"pageContent":" \n \n73 \nCode Listing 75: Checking the Status of the Docker Daemon \n$ sudo service docker status \n  docker.service - Docker Application Container Engine \n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: \nenabled) \n   Active: active (running) since Sun 2016-08-21 09:10:21 BST; 6h ago \n     Docs: https://docs.docker.com \n Main PID: 3091 (dockerd) \n    Tasks: 41 \n   Memory: 1.6G \n      CPU: 2min 35.083s \n   CGroup: /system.slice/docker.service \n           ├─3091 /usr/bin/dockerd -H fd:// \n           └─3175 docker-containerd -l unix:///var/run/docker/libcontainerd/docker-\ncontainerd.sock --shim docker-containerd- \nEach running container will be listed in the CGroup section—the control groups Docker is using. \nYou don’t need to know the details of kernel namespaces and control groups in order to use \nDocker successfully, but it is useful to be aware of how the runtime structures affect security. \nA note on security \nDocker takes a lot of the pain away from building, sharing, and running software systems, but it \ndoesn’t achieve this by taking security shortcuts. The Docker daemon runs with root privilege on \nLinux, and, in the early days of Docker, users expressed concern that this was a dangerous \nattack vector—could a vulnerable application be compromised and gain access to other \ncontainers on the host?  \nDocker worked with the Center for Internet Security to address those concerns and to build a \ncomprehensive set of recommendations in a benchmark document. These are publicly available \nfor different versions of Docker, such as the CIS Docker 1.12.0 Benchmark. \nSuccessive releases of Docker have increased security. You can now run containers in a user \nnamespace without root privileges, and you can build your images to have the processes inside \ncontainers running as nonroot users. The Docker documentation has a useful section on Docker \nSecurity that covers the technical elements of securing the container environment. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":73}}}],["138dbac0-9e5e-4ffd-a8cc-f6567a8ba787",{"pageContent":" \n \n74 \n Tip: There are features of Docker that actually increase the overall security of your \nsystems. The Docker Bench tool runs as a container and scans your Linux host for \nvulnerabilities. Docker Security Scanning is an optional feature on the Docker Hub that \nscans images in your repositories and reports on known vulnerabilities for the software \ninside your images. \nDocker on Windows \nWindows Server 2016 and Windows 10 have native support for containers and Docker. There \nare different ways to run containers on Windows: either as Windows Containers, which share \nthe operating system kernel and run in a similar way to Linux containers, or as Hyper-V \ncontainers, which can use the same images as Windows Containers but run in a very thin \nhypervisor layer so that each container has its own kernel. \nYou can’t run Linux-based containers on Windows, but Windows Containers are powered by \nDocker, which means you can package applications into Docker image binaries and run them in \nWindows using the same Docker command-line tool. In order for containers to run on Windows, \nthey need to be based from a Windows image, and Microsoft has base images available on the \nDocker Hub. \nThe Hub has two base images for Windows containers: microsoft/windowsservercore and \nmicrosoft/nanoserver. Windows Server Core is a full version of Windows Server that has all the \nstandard Windows Server features except the UI. With Server Core, you can install software \nfrom MSIs and run the full .NET Framework, which means you can use it as a base image to \ncontainerize an existing Windows application. \nNano Server is a minimal installation of Windows that follows the approach of Linux base \nimages on the Hub. Nano Server has a limited feature set—you can’t run MSIs or the .NET \nFramework, and you can only use PowerShell to administer it. That means the image weighs in \nat around 350 MB instead of 3 GB for Server Core, and it has a much smaller attack surface. \nWindows Containers are a new addition to the Docker ecosystem, but Windows uses the same \nDocker platform, so it’s an established technology. You can build a simple image from Windows \nNano Server using the Dockerfile in Code Listing 76. \nCode Listing 76: A Dockerfile for a Windows Container Image \nFROM microsoft/nanoserver \nCMD [\"powershell\", \"Write-Host 'Hello from Windows Nano Server!'\"] \n Note: Remember that when you build an image from a Dockerfile, Docker creates \ntemporary containers to run the instructions. Since the base image here is a Windows \ncontainer, you can only build this image from a Windows machine. If you’re using Docker \nfor Windows, be sure to switch to the Windows Containers option. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":74}}}],["9f417ca5-c434-4655-9622-85fd5e72982a",{"pageContent":" \n \n75 \nWhen the image is built, you can run it in the normal way. I’ve built and pushed an image from \nthis Dockerfile onto the Hub so that you can run it with the command in Code Listing 77. \nCode Listing 77: Running a Windows Container \n> docker container run sixeyed/nanoserver-helloworld \nHello from Windows Nano Server! \n Note: Again, this is a Windows-based container. You can’t run it if your host is a Mac \nor a Linux machine, or even if you’re using Windows with Docker running in a Linux VM. \nYou can use Windows containers directly with Docker for Windows and Docker on \nWindows Server 2016. \nThese are standard Docker containers that you can manage in the normal way so that docker \ncontainer ls will list the running containers and docker image ls will show you all the \nimages in your local cache. The Nano Server base image is a good starting point for new apps \nwhen you don’t need to install heavy software and can benefit from the reduced footprint.  \nThe Windows Server Core image doesn’t easily fit with the philosophy of having lightweight \nportable containers because you can easily end up with a 5 GB image once you’ve packaged \nyour app. But it’s a great opportunity to containerize existing Windows apps without having to \nrewrite them so that you can move existing workloads off their own servers and into a Docker \nswarm. \nDocker on ARM \nYou can also run Docker on low-cost, low-power computing devices based on the Advanced \nRISC Machine (ARM) CPU architecture, such as the Raspberry Pi or Pine64. ARM devices tend \nto be well supported with Linux operating systems, but unfortunately you can’t run normal Linux-\nbased Docker images on ARM devices. The Linux kernel for a container may be the same as \nthe kernel on the ARM device, but the binary image was probably compiled for the x86/x64 \nprocessor instruction set, which is not compatible with ARM. \nIn order to run Docker containers on ARM, the container must have been compiled for the ARM \nchipset, which in practice means building the image from a Dockerfile on your ARM device. \nOnce the image is built, you can ship it in the usual way, including pushing it to the Docker Hub \n(and there are many ARM-compatible images on the Hub). Currently, ARM images are not easy \nto identify because you can’t search the Hub by chipset or operating system. \nThe Raspberry Pi is a good ARM device to get started with because the setup script on \nget.docker.com has support for Raspbian, the native Linux distribution for the Pi. So, in order \nto install the Docker command line and Docker engine, simply use the same command for other \nLinux distributions, as in Code Listing 78. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":75}}}],["987b4042-f7f7-46e7-8bc9-2a813591a1f7",{"pageContent":" \n \n76 \nCode Listing 78: Installing Docker on the Raspberry Pi \n$ curl -sSL get.docker.com | sh \nThis is good for Raspberry Pi 2, 3, and Zero models—so you can get Docker running on a $5 \ncomputer! There are ARM base images on the Docker Hub, which means you can containerize \nany application that runs on ARM. And because popular platforms such as Java, Go, and \nNodeJS have ARM support, you can build Docker images for those apps. The new .NET Core \nplatform from Microsoft has ARM support on the roadmap for the next release. \nThe Dockerfile in Code Listing 79 can be used to build the obligatory Hello World app in an \nARM-compatible Docker image based on the resin/rpi-raspbian image on the Hub. \nCode Listing 79: Dockerfile for an ARM Image \nFROM resin/rpi-raspbian:jessie \nCMD [\"echo\", \"Hello World from the Pi!\"] \nYou can build and run that image with the Docker CLI as usual, but as with Windows containers, \nyou must run the commands on the correct architecture. In this case, you need to build the \nimage and run containers on the Pi itself, as in Code Listing 80. \nCode Listing 80: Building Images and Running Containers on ARM \npi@raspberrypi:~ $ docker build -t sixeyed/armhf-helloworld . \nSending build context to Docker daemon 9.728 kB \nStep 1 : FROM resin/rpi-raspbian:jessie \n ---> e353bbe6de96 \nStep 2 : CMD echo Hello World from the Pi! \n ---> Running in 41038ed95981 \n ---> cc950743d17a \nRemoving intermediate container 41038ed95981 \nSuccessfully built cc950743d17a \n \npi@raspberrypi:~ $ docker run sixeyed/armhf-helloworld \nHello World from the Pi! ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":76}}}],["6f2a57aa-2f37-4fa6-88ab-e8fdf23404ff",{"pageContent":" \n \n77 \nThere are a number of ARM-based images on the Docker Hub. The armhf account has \nrepositories for Node and Redis running on ARM, but they are flagged as experimental. The \nnumber of ARM-compatible images on the Hub is small at the moment, and building your own \nimages can be time-consuming on an ARM device, but once you have an image you can run \ncontainers from it in the normal way.  \nDocker doesn’t have full feature parity on ARM, but you can join multiple devices together in a \nswarm. Interestingly, the swarm supports heterogeneous hosts, which means you can build a \nhybrid swarm of ARM, x64, Linux, and Windows hosts. \nHybrid Docker swarms \nYou can’t mix containers for different OS kernels and CPU architectures on a single Docker \nhost, but you can build a swarm with hosts from multiple architectures and operating systems, \nand you can run different types of containers on the swarm. Figure 12 shows a sample \narchitecture for a hybrid swarm. \n \nFigure 12: A (Very) Hybrid Docker Swarm \nThis scenario is not quite as extreme as it looks. Provided you have a fast enough network \nconnection between the hosts, this swarm is highly functional and gives you a huge amount of \nflexibility. You can run an existing ASP.NET app in Windows Server Core containers on the \nWindows nodes, front them with a caching proxy in Nginx running on the Linux nodes, and use \nthe ARM nodes for noncritical workloads, such as collecting metrics from the other containers \nand running a performance dashboard. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":77}}}],["2bb36144-7f19-44d3-9576-e643ed8dc7c0",{"pageContent":" \n \n78 \nYou create a hybrid swarm in the same way as a normal swarm, starting with a manager and \njoining new nodes. But in order to make sure containers run only on the correct nodes, you \nneed to give Docker some extra information. You can add arbitrary labels to Docker hosts—for \nexample, you can add flags like cpu=armhf or os=linux and os=windows to the hosts.  \nIn Code Listing 81, I have created a hybrid swarm with an x64/Linux node as the manager and a \nRaspberry Pi as the worker. I use the update command with the --label-add option to label \nthe Pi with a custom cpu=armhf label. \nCode Listing 81: Labeling Swarm Nodes \n$ docker node ls \nID                           HOSTNAME     STATUS  AVAILABILITY  MANAGER STATUS \n0bvd2x0lh4e5kbpzpydvev02r *  sc-ub-brix   Ready   Active        Leader \n3he5xk2ve5fewk4j0pmwhqril    raspberrypi  Ready   Active   \n \n$ docker node update --label-add cpu=armhf raspberrypi \nraspberrypi \nServices can be scheduled with constraints to tell Docker that they have special host \nrequirements. Node labels can be used in constraints so that we can run three replicas of the \nx64-based Nginx container with the command in Code Listing 82 (which excludes nodes with \nthe cpu=armhf label). \nCode Listing 82: Creating a Service with a Node Label Constraint \n$ docker service create --name website --constraint 'node.labels.cpu != armhf' --\nreplicas 3 nginx:alpine \ndqtfwk7zmxe44r1ztrh2k116m \nWhen the scheduler selects nodes, it will exclude any that have a label with the key cpu and the \nvalue armhf. In this case, that only leaves the manager node, and as we see in Code Listing 83, \nall three containers are running on the manager. \nCode Listing 83: Listing Service Instances \n$ docker service ps website \nID                         NAME       IMAGE         NODE        DESIRED STATE  \nCURRENT STATE          ERROR \n7z9a5k5vaepdqer9eyi7izg16  website.1  nginx:alpine  sc-ub-brix  Running        \nRunning 6 seconds ago   ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":78}}}],["5b2a17da-cdbb-4db1-a081-55eae2a8998d",{"pageContent":" \n \n79 \nel30vk6euevq7swx1e9fw4axe  website.2  nginx:alpine  sc-ub-brix  Running        \nRunning 5 seconds ago   \n5g2p0f9d8i28jqfh01of1hft0  website.3  nginx:alpine  sc-ub-brix  Running        \nRunning 6 seconds ago \nDocker supports two kind of labels: node labels that were introduced with swarm mode for \nscheduling constraints, and engine labels for backwards compatibility on older hosts. In order to \nset the Docker Engine labels, you need to amend the environment configuration on the host, \nwhich will differ for each operating system. Node labels can be administered on the manager, \nwhich means they are a better approach. \n Note: In order to span systems across hybrid swarms, you need to create an overlay \nnetwork and start the services with the --network option. Different platforms have \ndifferent networking stacks, but as of Docker 17.06 you can network containers across \nhybrid swarms. \nSummary \nWe’ve looked at how Docker containers work on different operating systems and CPU \narchitectures. The main takeaway is that you can’t mix and match—images based on Windows \ncan run only on Windows hosts, images based on Linux can run only on Linux hosts, and \nimages compiled for x64 can run only on x64 hosts. \nWith Docker swarm mode, you can have nodes running on different architectures and operating \nsystems, which lets you run a single cluster capable of hosting Linux, Windows, and even ARM \napplications with a single management interface. That’s a particularly important option when \nyou’re paying for compute. If you want to run Dockerized Windows apps in the cloud, you can \nhave Windows VMs as worker nodes while using cheaper Linux VMs for the manager nodes. \nRunning cloud solutions on Docker is particularly attractive because you get a consistent \npackaging and deployment model that you can use on any cloud, which means you can avoid \nbeing locked into a particular cloud platform. Next, we’ll look at Docker in the cloud. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":79}}}],["df29ae08-588b-4c94-97dd-5aaa7081ae85",{"pageContent":" \n \n80 \nChapter 8  Running Docker in the Cloud \nDocker versus the cloud \nA production setup for Docker makes very few demands from your infrastructure. You need only \na few machines that can communicate with each other over a network—they can be physical \nmachines connected with Ethernet or VMs connected in a virtual network. When you’re hosting \nin the cloud, Docker makes a very good case for using Infrastructure-as-a-Service (IaaS) over \nPlatform-as-a-Service (PaaS).  \nTypically, PaaS is the preferred option because it removes the administrative burden of \nmanaging virtual machines, and cloud providers add value with their PaaS offerings, which \nmakes it easy to deploy and manage applications. However, all the PaaS offerings are custom. \nIf you build an app to run on Amazon’s Elastic Beanstalk, you can’t lift the app and deploy it on \nMicrosoft Azure instead—the packaging, deployment, and management models are not \ncompatible. That means on-premise environments can’t run the app on the same platform as \nproduction, which means that in development and testing you must run the app in a different \nway. \nBy packaging your app in Docker images, you can run the same images locally and in any cloud \nusing basic IaaS services and without taking a dependency on a particular vendor’s platform. In \nthis chapter, we’ll look at using Docker Machine to build a Docker swarm on the DigitalOcean \ncloud, we’ll cover the Docker for Azure product, and we’ll look at running a multicloud swarm. \nDocker on DigitalOcean \nDigitalOcean is a relatively new cloud provider. It initially made its name by providing fast SSD-\nbacked Linux VMs at a much lower cost than AWS, Azure, and Google. Its services are mostly \nin the IaaS space, which means you can spin up VMs, connect them in a virtual network, and \nset up persistent storage, but there are no higher-level PaaS services such as a message \nqueue or a managed database platform. \nWhen you sign up for a DigitalOcean account, you can create an API access token, which you \nuse with the do command-line tool to create and manage components in the cloud. You can \nmanually create a VM, log in, and install Docker, but it’s easier to use the Docker Machine tool. \nDocker Machine is an open-source tool that abstracts the creation of a VM running Docker. \nDocker Machine has drivers for VirtualBox, AWS, Azure, DigitalOcean, and more, so you can \ncreate VMs in the same way on different platforms on your machines or in the cloud. \n Note: Docker Machine is bundled with the Docker for Mac, Docker for Windows, and \nDocker Toolbox suites, but not on Linux. If you’re running Linux, the Docker \ndocumentation covers how to Install Docker Machine. \n ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":80}}}],["e19d48aa-cfb8-4d32-9299-67c6e5de0c30",{"pageContent":" \n \n81 \nThe provider plugins for Docker Machine use the relevant authentication mechanism. In order to \ncreate a new VM (called a “droplet” in DigitalOcean), you can use the command in Code Listing \n84 and supply your own access token. \nCode Listing 84: Creating a Docker Host on DigitalOcean with Docker Machine \n$ docker-machine create \\ \n --driver digitalocean \\ \n --digitalocean-access-token=[YOUR-API-TOKEN] \\ \n --digitalocean-region lon1 \\ \n --digitalocean-image ubuntu-16-04-x64 \\ \n do-node-01 \n \nRunning pre-create checks... \nCreating machine... \n(do-node-01) Creating SSH key... \n(do-node-01) Creating Digital Ocean droplet... \n(do-node-01) Waiting for IP address to be assigned to the Droplet... \nWaiting for machine to be running, this may take a few minutes... \nDetecting operating system of created instance... \nWaiting for SSH to be available... \nDetecting the provisioner... \nProvisioning with ubuntu(systemd)... \nInstalling Docker... \nWhen that completes, you’ll have a new VM in DigitalOcean that runs the latest version of \nDocker. There are lots of options that the create command accepts, and they’re flexible for \ndifferent VM providers. For DigitalOcean, I’ve specified the London datacenter and the latest \nlongterm support version of Ubuntu, 16.04, as the operating system image for the VM. \nDocker Machine locally stores details for the nodes it creates, and you can view them with the \ndocker-machine env command. The output of that command is structured so that you can run \nit and set environment variables for your local Docker CLI to communicate with the remote \nDocker Engine you’ve just created. In Code Listing 85, I do this to work with the DigitalOcean \ndroplet. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":81}}}],["d9ee8bae-9d9d-48d9-8588-788c66f82423",{"pageContent":" \n \n82 \nCode Listing 85: Configuring Docker CLI to Manage Remote Hosts \n$ docker-machine env do-node-01 \nexport DOCKER_TLS_VERIFY=\"1\" \nexport DOCKER_HOST=\"tcp://139.59.189.184:2376\" \nexport DOCKER_CERT_PATH=\"/home/elton/.docker/machine/machines/do-node-01\" \nexport DOCKER_MACHINE_NAME=\"do-node-01\" \n# Run this command to configure your shell:  \n# eval $(docker-machine env do-node-01) \n \n$ eval $(docker-machine env do-node-01) \nDocker CLI uses the DOCKER_HOST and other environment variables to connect to the Docker \nEngine server. With those values set, my local command line is working with the DigitalOcean \nVM, and I can use all the usual commands. In Code Listing 86, I check the Docker versions. \nCode Listing 86: Checking Docker Engine Versions \n$ docker version \nClient: \n Version:      1.12.1 \n API version:  1.24 \n Go version:   go1.6.3 \n Git commit:   23cf638 \n Built:        Thu Aug 18 05:33:38 2016 \n OS/Arch:      linux/amd64 \n \nServer: \n Version:      1.12.1 \n API version:  1.24 \n Go version:   go1.6.3 ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":82}}}],["c2ad7aa8-7f27-4633-a693-64ca841be99a",{"pageContent":" \n \n83 \n Git commit:   23cf638 \n Built:        Thu Aug 18 05:33:38 2016 \n OS/Arch:      linux/amd64 \nI have the latest version of Docker on my local client and the remote machine, and I can use the \nnormal Docker commands to administer the remote machine. Versions don’t need to match—\nyou can use a newer client with an older engine, but not vice versa. \n Tip: When you work with multiple Docker hosts, it’s easy to lose track and find \nyourself killing containers on remote hosts when you meant to work locally. The docker-\nmachine env -u command shows you how to reset the environment variables and point \nthe CLI back to the local host. \nYou can repeat the command to create more VMs running Docker, then use the Docker \nMachine ls command to view them all. In Code Listing 87, you can see I have created two \nmore DigitalOcean droplets through Docker Machine. \nCode Listing 87: Listing Docker Machine Hosts \n$ docker-machine ls -q \ndo-node-01 \ndo-node-02 \ndo-node-03 \nI won’t use these hosts yet—we’ll see how to join them to a multicloud swarm later in the \nchapter. \nDocker Machine is a good choice for creating virtual machines as hosts—the commands are \nfundamentally the same for different platforms with only the options changing to support \ndifferent feature sets. For most providers, the options can be specified in environment variables \ninstead of the command, which means your actual docker-machine commands can be generic. \nYou can capture your entire host setup in one script and have another script to tear it down, \nletting you easily spin up and remove environments. \nBecause it’s focused at the host level, there are limitations with Docker Machine, which means \nyou’ll need to fall back to the platform’s CLI if you want to create more complex IaaS \nenvironments with subnets in your virtual network or custom port configurations. Docker \naddresses the two main cloud providers with products that build out the entire infrastructure. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":83}}}],["d4ad4067-53c0-48d7-8472-59a333d03e08",{"pageContent":" \n \n84 \nDocker for Azure \nThe “Docker for” products all follow the same basic principle—they create a consistent Docker \nenvironment using the correct tools for the platform. Docker for Mac runs a Linux VM using \nHyperKit and Docker for Windows runs a Linux VM using Hyper-V. The end-user experience for \neach is the same because Docker makes use of the native platform tools. \nDocker for Azure creates a Docker swarm on Azure, and the deployment is based on an Azure \nResource Management template. Like the other products, Docker for Azure makes best use of \nthe platform. When you deploy the template, it creates a functional environment for the swarm \nto work in. This includes: \n• A top-level resource group. \n• A virtual network for all the nodes. \n• A single VM to be the manager node. \n• A Virtual Machine Scale Set for the worker nodes. \n• A Network Security Group to configure routing rules. \n• A load balancer sitting in front of the worker nodes. \n• Public IP addresses for the manager VM and the load balancer. \n Note: With AWS, the approach is very similar. Docker for AWS provides a \nCloudFormation template that creates all the resources. Docker for GCP is the latest \nedition. \nIn the Azure Portal, you can vary parameters for the deployment—for example, the size of the \nVMs and the initial number of worker nodes in the VM scale set, as we see in Figure 13. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":84}}}],["aa3e6169-2cb5-447e-be95-d6a0d1593f68",{"pageContent":" \n \n85 \n \nFigure 13: Creating a Swarm with Docker for Azure \nThe deployment is secured in two ways: with an Azure Active Directory Service Principal, which \nDocker for Azure uses to work with the Azure APIs from your subscription, and a normal SSH \nkey, which you use for connecting with the swarm from your client machine. The Docker for \nAzure documentation details how to set up the security. \nWhen deployment completes, you can connect to the manager node by SSH. In the Azure \nPortal, the Output section specifies the SSH command, as in Figure 14. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":85}}}],["5bcce35b-8387-4244-b64d-800cf1210c0c",{"pageContent":" \n \n86 \n \nFigure 14: Docker for Azure Output \nCode Listing 88 shows the connection to the manager node, where we can run all the standard \nDocker commands, such as listing out the nodes in the swarm. \nCode Listing 88: Connecting to the Docker for Azure Manager Node \n$ ssh docker@52.169.123.238 \nWelcome to Docker! \ndockerswarm-manager0:~$ docker node ls \nID                           HOSTNAME                    STATUS  AVAILABILITY  \nMANAGER STATUS \n17i6hbl89u3m4ridw9p6ykip6    _dockerswarm-worker-vmss_0  Ready   Active         \n33xg9i02xukght2232l5iprtc *  _dockerswarm-manager0       Ready   Active        \nLeader \n8q53wxmdo4umveppzazx0ntd7    _dockerswarm-worker-vmss_2  Ready   Active         \nczocuohj8r06q9ge29x2lrfgy    _dockerswarm-worker-vmss_1  Ready   Active \n Note: This is an Azure deployment, but the VMs are running Linux, not Windows. We \ncan run any Linux x64-based container images on this swarm, but we can’t run Windows-\nbased images. The Docker EE template on Azure Marketplace lets you create a hybrid \nswarm with Linux and Windows nodes. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":86}}}],["2c3cb5dc-957d-4742-bfdb-ef52cf28773c",{"pageContent":" \n \n87 \nVM Scale Sets in Azure can be configured to autoscale based on properties such as amount of \nCPU use. When a scaling event is triggered, a new VM is created from the same image as the \nother VMs. For example, in the case of Docker for Azure, a new VM would be created from the \nworker image and join the swarm. Currently, there is no functionality to rebalance the swarm \nwhen a new node joins, which means you’d need to manually scale services on the swarm to \nmake use of the new node(s). \nMulticloud Docker swarms \nWe touched on Docker networks in Chapter 5, Orchestrating Systems with Docker, but the \nfunctionality goes beyond creating a virtual network for machines that are already within the \nsame physical network. You can create an overlay network that spans physical networks, which \nmeans you can create a Docker swarm with nodes running on different clouds.  \n Note: The fact that you can do this doesn’t mean that you should. Swarm nodes are \nchatty, sending regular heartbeat messages, and a high latency link between different \ndatacenters, or even different continents, could cause problems if the manager thinks \nworker nodes have dropped out. In the worst case, you could have a network partition \nbetween clouds, which means manager nodes can’t reach each other and you’ll end up \nwith different managers in different clouds. But with careful planning and testing, this \narchitecture can be useful in certain scenarios. \nI’ll illustrate this with a simple swarm. I have a VM running Ubuntu with Docker in Azure that has \nthe firewall (“Network Security Group” in Azure terminology) set up to allow public Internet \naccess to the swarm ports. I can create a swarm in the usual way, but I need to specify two IP \naddresses, as in Code Listing 89. \nCode Listing 89: Initializing a Swarm with Two IP Addresses \n$ docker swarm init --advertise-addr 13.74.254.111 --listen-addr 10.3.0.4 \nThe --advertise-addr option specifies the public IP address that the manager should listen to \nfor connections, but that’s a virtual IP address managed by Azure—the VM itself doesn’t know \nabout the address. The --listen-addr option specifies the actual IP address the manager \nshould listen on, which means the manager can bind to one IP address but advertise another. \nI can now join one of my DigitalOcean droplets to the swarm using the same join command \nand by specifying the public virtual IP address of the Azure manager node, as seen in Code \nListing 90. \nCode Listing 90: Joining a Swarm from Another Cloud \n$ docker swarm join --token SWMTKN-1-\n3jsfck3x9s9sme8rmtk31321z28qu46o66399c555x9hqewmvx-bfsgl92blu2rng12o5xdvli98  \n13.74.254.111:2377 \nThis node joined a swarm as a worker. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":87}}}],["ca938b4f-2b82-48f2-8656-92e2feefb9b1",{"pageContent":" \n \n88 \nThis gives me a swarm with two nodes running in different countries on different clouds. Code \nListing 91 shows the node listing from the Azure manager. \nCode Listing 91: Listing the Nodes in a Multicloud Swarm \n$ docker node ls \nID                           HOSTNAME    STATUS  AVAILABILITY  MANAGER STATUS \n0ejba0pkdtkqjsqs5vkskvt9l    do-node-01  Ready   Active \n47950fi8w0evsk20ypkj4adk9 *  node0-ub    Ready   Active        Leader \nI can use this multicloud swarm like any other, creating services with many replicas that span \nacross the nodes. In Code Listing 92, I create a network for containers to communicate in. \nCode Listing 92: Creating an Overlay Network on the Swarm \n$ docker network create -d overlay website-net \n Note: The default network type is bridge, which is used for single hosts. For \nnetworks that span multiple hosts, Docker has the overlay network, which is what you \nneed to use for Docker swarm networks. \nThe overlay network can be specified when a service is created, adding all the containers to the \nnetwork. In Code Listing 93, I create the basic Nginx service with enough replicas to span both \nnodes, then I list out the service processes. \nCode Listing 93: Creating a Service Using an Overlay Network \n$ docker service create --name website --publish 80:80 --replicas 4 --network \nwebsite-net nginx:alpine \n... \n$ docker service ps website \nID                         NAME           IMAGE         NODE        DESIRED STATE  \nCURRENT STATE            ERROR \naq1ug1p1zknrfn3ucawbcfxhh  website.1      nginx:alpine  node0-ub    Running        \nRunning 13 seconds ago \n1w7gpilweobxzjh8lc993ce8w  website.2      nginx:alpine  do-node-01  Running        \nRunning 13 seconds ago \n9b52hijql5ugd723rql21bvgd  website.3      nginx:alpine  node0-ub    Running        \nRunning 13 seconds ago \n5oiscpzz73secc7hpelbfdazg  website.4      nginx:alpine  do-node-01  Running        ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":88}}}],["17ae4b10-b897-4844-82f0-5489f7f0a4b4",{"pageContent":" \n \n89 \nRunning 13 seconds ago \nWe see that there are four containers running, two each on the manager in Azure and the \nworker in DigitalOcean. In order to verify that the website is running, I can make an HTTP GET \nrequest to the public IP addresses for the nodes, as in Code Listing 94. \nCode Listing 94: Checking the Service with cURL \n$ curl http://138.68.129.206/  #DigitalOcean \n<!DOCTYPE html> \n<html> \n<head> \n<title>Welcome to nginx!</title> \n... \n$ curl http://13.74.254.111/  #Azure \n<!DOCTYPE html> \n<html> \n<head> \n<title>Welcome to nginx!</title> \nWith a multicloud setup like this, you can load balance across the nodes using a DNS service \nconfigured to serve either the Azure or the DigitalOcean endpoints. With an advanced DNS \nsystem, such as Amazon’s Route 53, you can put a health check on each endpoint so that you \ncan configure Azure as your primary endpoint but have traffic routing to DigitalOcean if Azure is \nunavailable or busy. \nMulticloud swarms, or swarms that are a mixture of cloud and on-premise hosts, offer some \nvery interesting opportunities. But you should be aware of the security implications and the \npotential performance issue with swarm heartbeats and control plane messages crossing \ndatacenters.  \nSummary \nRunning Docker in the cloud gives you the benefit of huge scale on-tap, which means you can \neasily spin up new nodes and add them to your swarm. This is even easier in the Docker for \nAWS and Docker for Azure products, as the swarms make use of the native scaling options for \neach platform, such as VM Scale Sets in Azure. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":89}}}],["c938cede-3b98-4992-b95b-d29a4e0ea6fd",{"pageContent":" \n \n90 \nCentralizing on Docker for your packaging model also isolates you from vendor lock-in in the \ncloud. Your infrastructure deployment scripts will be specific to whichever cloud you use, but \nyour application packages will run the same way on any cloud. So, if you start with AWS but \nthen cut a good deal with Azure, you can easily shift your whole workload without any \napplication code changes. \nThis IaaS approach to the cloud means taking on the burden of administering a fleet of VMs, but \nthere are products available that simplify the management and add additional layers of security \nto your application estate.  \nIn the final chapter, we’ll look at the product suite from Docker, Inc., which is aimed at running \nsafe and healthy production deployments of Docker, and we’ll see where to go next on our \nDocker journey. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":90}}}],["6d00b01b-803b-4b99-abd6-90ba57330c32",{"pageContent":" \n \n91 \nChapter 9  Continuing Your Docker Journey \nNext steps with Docker \nDocker is a simple technology, and this Succinctly e-book has enough detail that you should be \ncomfortable starting to use it. This final chapter will look at some useful next steps to consider \nwhen you’re ready to try Docker with your own applications. \nDocker is an established technology with technical support and financial backing from major \nenterprises, such as Amazon, Microsoft, and IBM, and it’s in production use at Netflix, Uber, and \nother cutting-edge tech companies. Application containers are a new model of compute, and \nDocker can genuinely revolutionize the way you build, run, and support software—but it doesn’t \nhave to be a violent revolution. \nIn this final chapter, we’ll look at products from Docker, Inc. that simplify the administration of \nDocker in your own datacenters and in the cloud while providing commercial support for your \nDocker hosts. We’ll cover some of the main use cases for Docker that are emerging from \nsuccessful implementations, and I’ll offer advice about where you can go next with Docker. \nDocker and Docker, Inc. \nThe core technologies in the Docker ecosystem—the Docker server, the CLI, Docker Compose, \nDocker Machine, and the “Docker for” range—are all free, open-source tools. The major \ncontributor to the open-source projects is Docker, Inc., a commercial company created by the \nfounders of Docker. In addition to the free tools, Docker, Inc. has a set of commercial products \nfor enterprises and companies that want software support. \nThe Docker, Inc. products make it easier to manage multiple hosts, run a secure image registry, \nwork with different infrastructures, and monitor the activity of your systems. Docker Enterprise \nEdition (Docker EE) runs on-premises, and in the cloud.  \nDocker EE \nDocker Enterprise Edition comes in two flavors—Basic gives you production support for your \ncontainer runtime, and Advanced gives you a full Containers-as-a-Service solution which you \ncan run in the datacenter or in any cloud. Docker EE Basic has the same feature set the free \nversion of Docker (called Docker CE or Community Edition), so you can run containers and \nswarms with production support. Docker EE Advanced has a much larger feature set, which will \naccelerate your move to production.  \nDocker EE Advanced has two components—the Universal Control Plane (UCP), which is where \nyou manage containers and hosts, and the Docker Trusted Registry (DTR), which is your own \nsecure, private image registry. UCP and DTR are integrated to provide a secure software supply \nchain. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":91}}}],["805fb8bd-2702-490f-9dcb-3baad5980e04",{"pageContent":" \n \n92 \nUCP sits on top of the orchestration layer, and it supports multiple schedulers. At the time of \nwriting it supports the classic Docker Swarm and Docker swarm mode. Both technologies run \non the same cluster. Support for Kubernetes is coming to Docker EE, and you will be able to \ndeploy applications on Kubernetes and Docker swarm across the same set of servers. \nUCP has a web UI for managing your on-premise Docker estate. Figure 15 depicts the \nhomepage with the dashboard showing how many resources UCP is managing—hosts, images, \ncontainers, and applications. It also shows how hard the hosts are working. \n \nFigure 15: The Universal Control Plane Dashboard \nUCP is a consolidated management portal. You can create volumes and networks, run \nindividual containers from images, or run a multicontainer application from a Docker Compose \nfile. From the node view, you can see the overview of the machines in the cluster. In Figure 16 \nwe can see a hybrid cluster with Linux manager nodes, Linux worker nodes, and Windows \nworker nodes. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":92}}}],["931b91b5-2754-4324-b9cf-dbd66a1b4941",{"pageContent":" \n \n93 \n \nFigure 16: Checking Swarm Nodes in UCP \nOn the containers page, you can drill down into a running container to check the CPU memory \nand network usage, connect with a console, or check the logs, as in Figure 17. \n \nFigure 17: Viewing Container Logs from UCP ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":93}}}],["cc83bcb9-c5e1-4e27-8c21-6253fca4dbee",{"pageContent":" \n \n94 \nUCP gives you role-based access control for your Docker resources. All resources can have \nlabels applied that are arbitrary key-value pairs. Permissions are applied to labels. You can \ncreate users and teams inside UCP or connect to an LDAP source to import user details and \ngrant permissions to resource labels at the team or user level.  \nYou can have UCP managing multiple environments and configure permissions so that \ndevelopers can run containers on the integration environment, but only testers can run them on \nthe staging environment, and only the production support team can run containers in production. \nUCP communicates with Docker Engine using the same APIs, but the engines are secured, too. \nIn order to manage UCP engines with the Docker CLI, you need a certificate generated by UCP, \nwhich means you can’t bypass the UCP permissions. \nYou secure the images that run on the hosts with the other part of Docker Datacenter—Docker \nTrusted Registry (DTR). DTR uses the same Registry API as the Hub, which means you work \nwith it in the same way, but it also has its own web UI. The DTR UI is similar to the Docker Hub \nUI, but as a private registry, and therefore you have more control. DTR shares the \nauthentication you have set up in UCP. Users can have their own repositories, and you can \ncreate organizations for shared repositories. Figure 18 shows the DTR homepage for an admin \nuser with access to all repositories. \n \nFigure 18: The Docker Trusted Registry \nDTR and UCP are closely integrated, which means you can use your own image repositories as \nthe source for running containers and applications on the UCP swarm. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":94}}}],["7466d5cc-2fdb-4c0e-b68e-0ab946918d64",{"pageContent":" \n \n95 \n Tip: DTR has the same security-scanning functionality as the Docker Hub, which \nmeans your own private images can be scanned for vulnerabilities. And because DTR \nalso has content trust, you can securely sign images and configure your Docker Engines \nso that they run only containers from signed images. \nDocker Cloud \nDocker Cloud provides a similar set of functionality to Docker EE, but it’s for managing images \nand nodes in public clouds. Docker EE is a good fit in the enterprise, where you will need fine-\ngrained access control and security for a large number of images and hosts. For smaller \ncompanies or project teams that are deploying to public clouds, Docker Cloud gives you a \nsimilar level of control but without the commercial support. \nDocker Cloud works similarly to Docker Machine for provisioning new nodes. It has providers for \nall the major clouds, and you can spin up new hosts running Docker from Docker Cloud. When \nyou use Docker Cloud, you have two commercial relationships: your infrastructure is billed by \nthe cloud provider and the additional Docker features are billed by Docker, Inc. \nFigure 19 shows me logged in to https://cloud.docker.com (you can use your Docker Hub \ncredentials and try out Docker Cloud; you don’t need to start with a paid plan) with my \nDigitalOcean and Azure accounts set up. \n \nFigure 19: Cloud Providers in Docker Cloud ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":95}}}],["b9d2ebbd-2165-4594-8870-f56794871ede",{"pageContent":" \n \n96 \nYou can create clusters of nodes on your chosen cloud provider, and Docker Cloud will create a \nVM with the commercially supported Docker Engine installed. Docker Cloud integrates with the \npublic Docker Hub in the same way that UCP and DTR integrate on-premise. You can deploy \ncontainers from your images in the Hub, and you can create private repositories that are only \nvisible to you or your organization. \nIn Figure 20, my Docker Hub repositories are shown in the Docker Cloud UI, and I can deploy to \nmy cloud Docker nodes directly from here. \n \nFigure 20: Image Repositories in Docker Cloud \nWith a paid plan for Docker Cloud, you get the same image security scanning for your own \nrepositories that’s available in Docker Trusted Registry and for official repositories on the Hub. \n Tip: This was a very quick look at Docker Enterprise Edition and Docker Cloud, but \nboth are worth further investigation. Commercial support and secure access are \nprerequisites for many enterprises adopting new technologies. \nDocker and DevOps \nDocker is facilitating major changes in the way software is built and managed. The capabilities \nof the Docker product suite, together with the commercial support from Docker, Inc., are \nfoundations for building better software and delivering it more quickly. ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":96}}}],["5aaa97e7-3f33-4277-9dad-4a5d7dcd1c87",{"pageContent":" \n \n97 \nThe Dockerfile isn’t often held up as a major contribution to the software industry, but it can play \na key role for organizations looking to adopt DevOps. A transition to DevOps means unifying \nexisting development and operations teams, and the Dockerfile is an obvious central point \nwhere different concerns can meet. \nIn essence, the Dockerfile is a deployment guide. But instead of being a vague document open \nto human interpretation, it’s a concise, clear, and actionable set of steps for packaging an \napplication into a runnable container image. It’s a good first place for dev and ops teams to \nmeet—developers can start with a simple Dockerfile to package the app, then operations can \ntake it over, hardening the image or swapping out to a compatible but customized base image. \nA smooth deployment pipeline is crucial to successful DevOps. Adopting Docker as your host \nplatform means you can generate versioned images from each build, deploy them to your test \nenvironment, and, when your test suite passes, promote to staging and production knowing that \nyou will be running the exact same codebase that passed your tests. \n Tip: Docker swarm mode supports rolling service updates, which means that when \nyou upgrade a running app to a new version, Docker will incrementally take down \ninstances of the old version and bring up new ones. This makes for very safe upgrades \nof stateless apps. See the rolling update tutorial to learn more about rolling upgrades. \nDocker also makes a big contribution to DevOps through the simplicity of the host environment. \nWithin the datacenter, your VM setup can be as lean as simply installing a base OS and \nDocker—everything else, including business applications and operational monitoring, runs in \ncontainers on the swarm. \nNew operating systems are likely to grow in popularity to support Docker’s simplicity. Canonical \nhas Ubuntu Snappy Core, and Microsoft has Nano Server. Both of them are lightweight \noperating systems that can be used for container-based images, but they can also be used as \nthe host operating system on the server. They have a minimal feature set that equates to a \nminimal attack surface and greatly reduced patching requirements.  \nThe key technical practices of DevOps—infrastructure-as-code, continuous delivery, continuous \nmonitoring—are all made simpler with Docker, which reduces your application environment to a \nfew simple primitives: the image, the container, and the host. \nDocker and microservices \nContainerized solutions are not only suited to greenfield application development. Taking an \nexisting application and breaking suitable parts out into separate application containers can \ntransform a heavyweight, monolithic app into a set of lean, easily upgradable services. \nLightweight containers and the built-in orchestration from Docker provide the backbone for \nmicroservice architectures. \n ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":97}}}],["a4b6fde8-9fa0-48dc-8a81-131f85348c6e",{"pageContent":" \n \n98 \nThe microservice architecture is actually easier to apply to an existing application than to a new \nsystem because you already have a clear understanding of where to find the logical service \nboundaries and the physical pain points. There are two good candidates for breaking out from a \nmonolith into separate services without a major rewrite of your application: \n• Small, well-contained components that add business value if they are easy to change. \n• Larger, heavily integrated components that add business value if they stay the same. \nAs an example, consider a web app used by a business that frequently wants to change the \nhomepage in order to try increasing customer engagement while rarely wanting to change the \ncheckout stage because it feels that stage does all it needs to do. If that app is currently a \ndeployed as single, monolithic unit, you can’t make a fast, simple change to the homepage—\nyou need to test and deploy the entire app, including the checkout component that you haven’t \nchanged. \nBreaking the homepage and the checkout component into separate application containers \nmeans you can make changes to the homepage and deploy frequently while knowing you won’t \nimpact the checkout component. You should only test the changes you make, and you can \neasily roll back if the new version isn’t well received.  \nThe cost of microservices is the additional complexity of having many small services working \ntogether. However, running those services in Docker containers makes it a problem of \norchestration, and that concern is well served by the Docker ecosystem. \nNext steps: containerize what you know \nYou don’t need to embark on a DevOps transition or re-architect your key systems in order to \nmake good use of Docker. If you start by migrating applications you use regularly and \nunderstand well, you’ll soon gain a lot of valuable experience—and confidence—with running \napplications in containers. \nDevelopment toolsets are a good place to start, and it’s surprising how often a tool you rely on \nhas already been wrapped into a Docker image on the Hub. At minimum, all you need to do is \npull the image and check it out. At most, you might build a new image using your preferred base \nOS and tools.  \nLots of teams start by containerizing their own core systems—GitLab and Jenkins have very \npopular repositories on the Hub, and you can find plenty of sample images for tools such as file \nshares, wikis, and code analysis. \nUsing containers every day is the quickest way to get comfortable with Docker, and you’ll soon \nbe finding all sorts of scenarios that Docker improves. Enjoy the journey! \n ","metadata":{"source":"C:\\Users\\DELL\\Desktop\\langChain Project\\documents\\document.pdf","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.7","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"Docker Succinctly","Author":"Elton Stoneman","Subject":"An introduction to the Docker container technology.","Keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","Creator":"Microsoft® Word 2016","Producer":"Microsoft® Word 2016","CreationDate":"D:20180111155744-05'00'","ModDate":"D:20180111155744-05'00'"},"metadata":{"_metadata":{"pdf:producer":"Microsoft® Word 2016","pdf:keywords":"Docker, containers, application packaging, virtualization, open source, container platforms","dc:title":"Docker Succinctly","dc:creator":"Elton Stoneman","dc:description":"An introduction to the Docker container technology.","xmp:creatortool":"Microsoft® Word 2016","xmp:createdate":"2018-01-11T15:57:44-05:00","xmp:modifydate":"2018-01-11T15:57:44-05:00","xmpmm:documentid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE","xmpmm:instanceid":"uuid:54AF792E-0D4B-4608-9B4A-5DA50BB77BBE"}},"totalPages":98},"loc":{"pageNumber":98}}}]],{"0":"174f96b3-fff1-41fe-8e5e-e31e1d131d32","1":"747f4b27-cde8-4cd0-baff-1c3210fac2e9","2":"6ca95aaf-3e3d-40d1-98aa-e7f56a813b0b","3":"4dfd0b1b-64ba-475c-a550-013914cafcab","4":"03c21ae8-a94f-4ed1-970b-313a3b89166f","5":"3fb5464a-2d7b-469d-adbe-75a968bac1dd","6":"bfd6f245-88c7-4845-a26f-1f9ff49eabff","7":"e7aa12a4-d15d-41b8-9af9-8e43791a214f","8":"1ff5b99f-45e4-4993-96fe-22a8ced183c8","9":"2445d508-9694-4d96-9e5f-6e8e9736e064","10":"f40410c7-024f-4b52-9dc5-3e8ea2aca5b6","11":"894f623a-e247-4111-89d9-2dc3149ba681","12":"0b802f3d-09d2-4948-83ee-88df14d03f64","13":"907a157f-102a-43ee-9280-b2c9ef97d916","14":"6b077ca7-949e-4011-9ecb-b2a619d4b91d","15":"1e41d1cb-41e8-4347-99bf-d48be410e3ed","16":"db0186ee-858d-41f8-8a78-bbad426b7dcd","17":"a79b161b-102f-4ec0-b8b3-d8b8a6e95ef4","18":"bf378c53-0691-43aa-b090-01f7bad38e6f","19":"4b233ba4-ef20-46a6-bc24-65df341204c3","20":"6eebdc07-3b8b-4200-bddb-22a0e1909829","21":"c3b16ade-a1f6-4919-8606-d8af371363d0","22":"5b118a53-4cd2-426f-ad01-46852582b023","23":"78239baa-40fe-42d1-9744-f9317419b61c","24":"0cd2c14a-115b-4e94-bd9f-a55126ddefcf","25":"379e9ace-08b6-4c79-8469-fea5d23b1d77","26":"2a341e35-3230-45a7-a42d-e5104564099f","27":"2aa28031-ed16-48d8-a847-09660cfb3cc1","28":"b0ab89d7-6f6f-46bf-ba40-093ffa03d1b7","29":"674efcb1-87ba-4448-9e62-820b012ddd55","30":"0844770c-b891-484d-9237-1bc2fa3f4e05","31":"6d1cfc84-5bed-4704-beb9-c2adeed920f7","32":"5a58bb09-4b9a-4837-b63a-1dea1f2655aa","33":"bcb0c786-2251-4326-a3df-257c23ea3473","34":"1c9537cc-f010-4df2-bd21-4ccdb17d6bca","35":"621dadbd-e728-4935-badc-2d3406199987","36":"ab7fcc9b-8f60-4e8e-a2d0-51ba58297aea","37":"35cbfead-9b77-4adc-9982-4cf1954f8ee1","38":"f0aeecad-b31a-4b96-931b-76ad563ff64a","39":"7742aa3f-3fa2-4605-8bf0-30b7d31cf9a1","40":"72e7d143-48b0-4b63-aef2-a4e2a2a5ca5b","41":"0010b331-e990-4c40-8d3e-570375eceae9","42":"786ca99d-368e-40bb-8c28-c883ec232c49","43":"6e913bd2-ac38-47db-ae25-06a4316062ac","44":"ccb54d79-41f6-425c-9c06-01b36dbd03e2","45":"ef182d36-1383-4a90-b1d5-d4af2fed4655","46":"24b666e2-1015-4e69-bba2-3204057878a3","47":"56c73f15-89a9-4004-a2e1-5a5aaa77ac59","48":"746f107c-46cf-4e2b-b2c8-fcf71d1bbcea","49":"13ca8631-7218-4fe0-8fff-877a7f8aca48","50":"9798cb56-10ae-454a-b566-ab8d75936679","51":"c773eb5b-4fad-44a4-87a7-02fa9226447b","52":"59849945-d0f4-4c00-bc15-c4a9f19a0991","53":"2bc92775-25ff-4849-a289-1b8a17626999","54":"e1feecf6-2813-4a19-b4c9-e2c3bd78b80b","55":"b1c34faf-9d9a-4eb4-bd1b-c2bb5009260c","56":"2475345d-c65d-4cfc-bfe5-b48d6775c7c6","57":"f771076d-b9ce-4ae8-a2d5-f7e1d034d945","58":"661ba90c-5d95-4376-bb28-47756da182c4","59":"08f344b8-5563-4510-be38-e870d49b8c3b","60":"e6ba00de-3f10-4ffc-add7-dc9bd876b2b1","61":"f5841a7d-8e97-41d3-ab2f-92c63af75f55","62":"422d1f1c-89e2-4f69-b238-c5e8be92d323","63":"65f4b0ad-f93b-4f5d-ab06-e304bb0db7ae","64":"d405a06c-39de-4668-a91d-04f76628ea30","65":"f95eb86c-8659-4990-a079-583b7083a507","66":"cf424720-15ad-4673-a391-e8e83304162e","67":"cfeddc57-41de-4ee1-9014-7f2d29d8f60a","68":"2790b55c-a6ca-4178-a8a7-081256989b07","69":"ff6a8a17-217d-4e35-b660-383e6b00b374","70":"067f0f09-33cc-42eb-8cfe-4e7f2dc0dab6","71":"d5c60d95-ed33-43bc-a177-52e89595c07f","72":"138dbac0-9e5e-4ffd-a8cc-f6567a8ba787","73":"9f417ca5-c434-4655-9622-85fd5e72982a","74":"987b4042-f7f7-46e7-8bc9-2a813591a1f7","75":"6f2a57aa-2f37-4fa6-88ab-e8fdf23404ff","76":"2bb36144-7f19-44d3-9576-e643ed8dc7c0","77":"5b2a17da-cdbb-4db1-a081-55eae2a8998d","78":"df29ae08-588b-4c94-97dd-5aaa7081ae85","79":"e19d48aa-cfb8-4d32-9299-67c6e5de0c30","80":"d9ee8bae-9d9d-48d9-8588-788c66f82423","81":"c2ad7aa8-7f27-4633-a693-64ca841be99a","82":"d4ad4067-53c0-48d7-8472-59a333d03e08","83":"aa3e6169-2cb5-447e-be95-d6a0d1593f68","84":"5bcce35b-8387-4244-b64d-800cf1210c0c","85":"2c3cb5dc-957d-4742-bfdb-ef52cf28773c","86":"ca938b4f-2b82-48f2-8656-92e2feefb9b1","87":"17ae4b10-b897-4844-82f0-5489f7f0a4b4","88":"c938cede-3b98-4992-b95b-d29a4e0ea6fd","89":"6d00b01b-803b-4b99-abd6-90ba57330c32","90":"805fb8bd-2702-490f-9dcb-3baad5980e04","91":"931b91b5-2754-4324-b9cf-dbd66a1b4941","92":"cc83bcb9-c5e1-4e27-8c21-6253fca4dbee","93":"7466d5cc-2fdb-4c0e-b68e-0ab946918d64","94":"b9d2ebbd-2165-4594-8870-f56794871ede","95":"5aaa97e7-3f33-4277-9dad-4a5d7dcd1c87","96":"a4b6fde8-9fa0-48dc-8a81-131f85348c6e"}]